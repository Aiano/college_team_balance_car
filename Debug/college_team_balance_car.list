
college_team_balance_car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d08  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001eec  08001eec  00011eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f18  08001f18  00011f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f1c  08001f1c  00011f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002b4  2000000c  08001f2c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002c0  08001f2c  000202c0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001244a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002289  00000000  00000000  0003247f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000e38  00000000  00000000  00034708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000dc8  00000000  00000000  00035540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00019642  00000000  00000000  00036308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015d13  00000000  00000000  0004f94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00096ddc  00000000  00000000  0006565d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  000fc439  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002808  00000000  00000000  000fc48c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0000d994  00000000  00000000  000fec94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001ed4 	.word	0x08001ed4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001ed4 	.word	0x08001ed4

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000228:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	2400      	movs	r4, #0
 800022c:	9404      	str	r4, [sp, #16]
 800022e:	9405      	str	r4, [sp, #20]
 8000230:	9406      	str	r4, [sp, #24]
 8000232:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000234:	4b2c      	ldr	r3, [pc, #176]	; (80002e8 <MX_GPIO_Init+0xc4>)
 8000236:	699a      	ldr	r2, [r3, #24]
 8000238:	f042 0210 	orr.w	r2, r2, #16
 800023c:	619a      	str	r2, [r3, #24]
 800023e:	699a      	ldr	r2, [r3, #24]
 8000240:	f002 0210 	and.w	r2, r2, #16
 8000244:	9200      	str	r2, [sp, #0]
 8000246:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000248:	699a      	ldr	r2, [r3, #24]
 800024a:	f042 0220 	orr.w	r2, r2, #32
 800024e:	619a      	str	r2, [r3, #24]
 8000250:	699a      	ldr	r2, [r3, #24]
 8000252:	f002 0220 	and.w	r2, r2, #32
 8000256:	9201      	str	r2, [sp, #4]
 8000258:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025a:	699a      	ldr	r2, [r3, #24]
 800025c:	f042 0204 	orr.w	r2, r2, #4
 8000260:	619a      	str	r2, [r3, #24]
 8000262:	699a      	ldr	r2, [r3, #24]
 8000264:	f002 0204 	and.w	r2, r2, #4
 8000268:	9202      	str	r2, [sp, #8]
 800026a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800026c:	699a      	ldr	r2, [r3, #24]
 800026e:	f042 0208 	orr.w	r2, r2, #8
 8000272:	619a      	str	r2, [r3, #24]
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f003 0308 	and.w	r3, r3, #8
 800027a:	9303      	str	r3, [sp, #12]
 800027c:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800027e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80002f8 <MX_GPIO_Init+0xd4>
 8000282:	4622      	mov	r2, r4
 8000284:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000288:	4640      	mov	r0, r8
 800028a:	f000 fe17 	bl	8000ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 800028e:	4d17      	ldr	r5, [pc, #92]	; (80002ec <MX_GPIO_Init+0xc8>)
 8000290:	4622      	mov	r2, r4
 8000292:	2102      	movs	r1, #2
 8000294:	4628      	mov	r0, r5
 8000296:	f000 fe11 	bl	8000ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800029a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800029e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a0:	2701      	movs	r7, #1
 80002a2:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a6:	2602      	movs	r6, #2
 80002a8:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002aa:	a904      	add	r1, sp, #16
 80002ac:	4640      	mov	r0, r8
 80002ae:	f000 fce9 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INT_Pin|DRDY_Pin;
 80002b2:	2330      	movs	r3, #48	; 0x30
 80002b4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <MX_GPIO_Init+0xcc>)
 80002b8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ba:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002bc:	a904      	add	r1, sp, #16
 80002be:	480d      	ldr	r0, [pc, #52]	; (80002f4 <MX_GPIO_Init+0xd0>)
 80002c0:	f000 fce0 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo_Pin;
 80002c4:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002c6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80002ca:	a904      	add	r1, sp, #16
 80002cc:	4628      	mov	r0, r5
 80002ce:	f000 fcd9 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trig_Pin;
 80002d2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d4:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d8:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 80002da:	a904      	add	r1, sp, #16
 80002dc:	4628      	mov	r0, r5
 80002de:	f000 fcd1 	bl	8000c84 <HAL_GPIO_Init>

}
 80002e2:	b008      	add	sp, #32
 80002e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40010c00 	.word	0x40010c00
 80002f0:	10110000 	.word	0x10110000
 80002f4:	40010800 	.word	0x40010800
 80002f8:	40011000 	.word	0x40011000

080002fc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002fc:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002fe:	480b      	ldr	r0, [pc, #44]	; (800032c <MX_I2C1_Init+0x30>)
 8000300:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <MX_I2C1_Init+0x34>)
 8000302:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <MX_I2C1_Init+0x38>)
 8000306:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000308:	2300      	movs	r3, #0
 800030a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800030c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800030e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000312:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000314:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000316:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000318:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800031a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800031c:	f000 fdd4 	bl	8000ec8 <HAL_I2C_Init>
 8000320:	b900      	cbnz	r0, 8000324 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000322:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000324:	f000 f87c 	bl	8000420 <Error_Handler>
}
 8000328:	e7fb      	b.n	8000322 <MX_I2C1_Init+0x26>
 800032a:	bf00      	nop
 800032c:	20000028 	.word	0x20000028
 8000330:	40005400 	.word	0x40005400
 8000334:	000186a0 	.word	0x000186a0

08000338 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000338:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800033a:	480b      	ldr	r0, [pc, #44]	; (8000368 <MX_I2C2_Init+0x30>)
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <MX_I2C2_Init+0x34>)
 800033e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <MX_I2C2_Init+0x38>)
 8000342:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000344:	2300      	movs	r3, #0
 8000346:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000348:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800034e:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000350:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000352:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000354:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000356:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000358:	f000 fdb6 	bl	8000ec8 <HAL_I2C_Init>
 800035c:	b900      	cbnz	r0, 8000360 <MX_I2C2_Init+0x28>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800035e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000360:	f000 f85e 	bl	8000420 <Error_Handler>
}
 8000364:	e7fb      	b.n	800035e <MX_I2C2_Init+0x26>
 8000366:	bf00      	nop
 8000368:	2000007c 	.word	0x2000007c
 800036c:	40005800 	.word	0x40005800
 8000370:	000186a0 	.word	0x000186a0

08000374 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000374:	b510      	push	{r4, lr}
 8000376:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000378:	2300      	movs	r3, #0
 800037a:	9304      	str	r3, [sp, #16]
 800037c:	9305      	str	r3, [sp, #20]
 800037e:	9306      	str	r3, [sp, #24]
 8000380:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8000382:	6803      	ldr	r3, [r0, #0]
 8000384:	4a22      	ldr	r2, [pc, #136]	; (8000410 <HAL_I2C_MspInit+0x9c>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d004      	beq.n	8000394 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 800038a:	4a22      	ldr	r2, [pc, #136]	; (8000414 <HAL_I2C_MspInit+0xa0>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d01f      	beq.n	80003d0 <HAL_I2C_MspInit+0x5c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000390:	b008      	add	sp, #32
 8000392:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000394:	4c20      	ldr	r4, [pc, #128]	; (8000418 <HAL_I2C_MspInit+0xa4>)
 8000396:	69a3      	ldr	r3, [r4, #24]
 8000398:	f043 0308 	orr.w	r3, r3, #8
 800039c:	61a3      	str	r3, [r4, #24]
 800039e:	69a3      	ldr	r3, [r4, #24]
 80003a0:	f003 0308 	and.w	r3, r3, #8
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003a8:	23c0      	movs	r3, #192	; 0xc0
 80003aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003ac:	2312      	movs	r3, #18
 80003ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003b0:	2303      	movs	r3, #3
 80003b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b4:	a904      	add	r1, sp, #16
 80003b6:	4819      	ldr	r0, [pc, #100]	; (800041c <HAL_I2C_MspInit+0xa8>)
 80003b8:	f000 fc64 	bl	8000c84 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003bc:	69e3      	ldr	r3, [r4, #28]
 80003be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c2:	61e3      	str	r3, [r4, #28]
 80003c4:	69e3      	ldr	r3, [r4, #28]
 80003c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003ca:	9301      	str	r3, [sp, #4]
 80003cc:	9b01      	ldr	r3, [sp, #4]
 80003ce:	e7df      	b.n	8000390 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d0:	4c11      	ldr	r4, [pc, #68]	; (8000418 <HAL_I2C_MspInit+0xa4>)
 80003d2:	69a3      	ldr	r3, [r4, #24]
 80003d4:	f043 0308 	orr.w	r3, r3, #8
 80003d8:	61a3      	str	r3, [r4, #24]
 80003da:	69a3      	ldr	r3, [r4, #24]
 80003dc:	f003 0308 	and.w	r3, r3, #8
 80003e0:	9302      	str	r3, [sp, #8]
 80003e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80003e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80003e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003ea:	2312      	movs	r3, #18
 80003ec:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ee:	2303      	movs	r3, #3
 80003f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f2:	a904      	add	r1, sp, #16
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <HAL_I2C_MspInit+0xa8>)
 80003f6:	f000 fc45 	bl	8000c84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80003fa:	69e3      	ldr	r3, [r4, #28]
 80003fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000400:	61e3      	str	r3, [r4, #28]
 8000402:	69e3      	ldr	r3, [r4, #28]
 8000404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000408:	9303      	str	r3, [sp, #12]
 800040a:	9b03      	ldr	r3, [sp, #12]
}
 800040c:	e7c0      	b.n	8000390 <HAL_I2C_MspInit+0x1c>
 800040e:	bf00      	nop
 8000410:	40005400 	.word	0x40005400
 8000414:	40005800 	.word	0x40005800
 8000418:	40021000 	.word	0x40021000
 800041c:	40010c00 	.word	0x40010c00

08000420 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000422:	e7fe      	b.n	8000422 <Error_Handler+0x2>

08000424 <SystemClock_Config>:
{
 8000424:	b500      	push	{lr}
 8000426:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000428:	2300      	movs	r3, #0
 800042a:	9309      	str	r3, [sp, #36]	; 0x24
 800042c:	930b      	str	r3, [sp, #44]	; 0x2c
 800042e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	9302      	str	r3, [sp, #8]
 8000434:	9303      	str	r3, [sp, #12]
 8000436:	9304      	str	r3, [sp, #16]
 8000438:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800043a:	2101      	movs	r1, #1
 800043c:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800043e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000442:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000444:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000446:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000448:	2302      	movs	r3, #2
 800044a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800044c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800044e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000452:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000454:	a806      	add	r0, sp, #24
 8000456:	f000 fe2b 	bl	80010b0 <HAL_RCC_OscConfig>
 800045a:	b980      	cbnz	r0, 800047e <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045c:	230f      	movs	r3, #15
 800045e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000460:	2102      	movs	r1, #2
 8000462:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800046c:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000470:	a801      	add	r0, sp, #4
 8000472:	f001 f85b 	bl	800152c <HAL_RCC_ClockConfig>
 8000476:	b920      	cbnz	r0, 8000482 <SystemClock_Config+0x5e>
}
 8000478:	b011      	add	sp, #68	; 0x44
 800047a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800047e:	f7ff ffcf 	bl	8000420 <Error_Handler>
    Error_Handler();
 8000482:	f7ff ffcd 	bl	8000420 <Error_Handler>

08000486 <main>:
{
 8000486:	b508      	push	{r3, lr}
  HAL_Init();
 8000488:	f000 fb6e 	bl	8000b68 <HAL_Init>
  SystemClock_Config();
 800048c:	f7ff ffca 	bl	8000424 <SystemClock_Config>
  MX_GPIO_Init();
 8000490:	f7ff fec8 	bl	8000224 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000494:	f7ff ff32 	bl	80002fc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000498:	f7ff ff4e 	bl	8000338 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800049c:	f000 fa4c 	bl	8000938 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004a0:	f000 fa64 	bl	800096c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80004a4:	f000 fa7c 	bl	80009a0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80004a8:	f000 f998 	bl	80007dc <MX_TIM1_Init>
  MX_TIM2_Init();
 80004ac:	f000 f846 	bl	800053c <MX_TIM2_Init>
  MX_TIM3_Init();
 80004b0:	f000 f876 	bl	80005a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004b4:	f000 f9f6 	bl	80008a4 <MX_TIM4_Init>
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <main+0x32>
	...

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <HAL_MspInit+0x3c>)
 80004c0:	699a      	ldr	r2, [r3, #24]
 80004c2:	f042 0201 	orr.w	r2, r2, #1
 80004c6:	619a      	str	r2, [r3, #24]
 80004c8:	699a      	ldr	r2, [r3, #24]
 80004ca:	f002 0201 	and.w	r2, r2, #1
 80004ce:	9200      	str	r2, [sp, #0]
 80004d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	69da      	ldr	r2, [r3, #28]
 80004d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004d8:	61da      	str	r2, [r3, #28]
 80004da:	69db      	ldr	r3, [r3, #28]
 80004dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e0:	9301      	str	r3, [sp, #4]
 80004e2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e4:	4a05      	ldr	r2, [pc, #20]	; (80004fc <HAL_MspInit+0x40>)
 80004e6:	6853      	ldr	r3, [r2, #4]
 80004e8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f2:	b002      	add	sp, #8
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010000 	.word	0x40010000

08000500 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <NMI_Handler>

08000502 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler>

08000504 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <MemManage_Handler>

08000506 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <BusFault_Handler>

08000508 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <UsageFault_Handler>

0800050a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800050a:	4770      	bx	lr

0800050c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050c:	4770      	bx	lr

0800050e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800050e:	4770      	bx	lr

08000510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000510:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000512:	f000 fb3b 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000516:	bd08      	pop	{r3, pc}

08000518 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000518:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800051a:	4802      	ldr	r0, [pc, #8]	; (8000524 <TIM2_IRQHandler+0xc>)
 800051c:	f001 f97b 	bl	8001816 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000520:	bd08      	pop	{r3, pc}
 8000522:	bf00      	nop
 8000524:	200001a8 	.word	0x200001a8

08000528 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000528:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800052a:	4802      	ldr	r0, [pc, #8]	; (8000534 <TIM3_IRQHandler+0xc>)
 800052c:	f001 f973 	bl	8001816 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000530:	bd08      	pop	{r3, pc}
 8000532:	bf00      	nop
 8000534:	20000118 	.word	0x20000118

08000538 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000538:	4770      	bx	lr
	...

0800053c <MX_TIM2_Init>:
  HAL_TIM_MspPostInit(&htim1);

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800053c:	b500      	push	{lr}
 800053e:	b08d      	sub	sp, #52	; 0x34
  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000540:	2300      	movs	r3, #0
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000546:	4815      	ldr	r0, [pc, #84]	; (800059c <MX_TIM2_Init+0x60>)
 8000548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800054c:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 800054e:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000550:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8000552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000556:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000558:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800055a:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800055c:	2201      	movs	r2, #1
 800055e:	9203      	str	r2, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000560:	9304      	str	r3, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000562:	9205      	str	r2, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000564:	9306      	str	r3, [sp, #24]
  sConfig.IC1Filter = 0;
 8000566:	9307      	str	r3, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000568:	9308      	str	r3, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800056a:	9209      	str	r2, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800056c:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800056e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000570:	a903      	add	r1, sp, #12
 8000572:	f001 fa85 	bl	8001a80 <HAL_TIM_Encoder_Init>
 8000576:	b950      	cbnz	r0, 800058e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000578:	2300      	movs	r3, #0
 800057a:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800057c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800057e:	a901      	add	r1, sp, #4
 8000580:	4806      	ldr	r0, [pc, #24]	; (800059c <MX_TIM2_Init+0x60>)
 8000582:	f001 fb75 	bl	8001c70 <HAL_TIMEx_MasterConfigSynchronization>
 8000586:	b928      	cbnz	r0, 8000594 <MX_TIM2_Init+0x58>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000588:	b00d      	add	sp, #52	; 0x34
 800058a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800058e:	f7ff ff47 	bl	8000420 <Error_Handler>
 8000592:	e7f1      	b.n	8000578 <MX_TIM2_Init+0x3c>
    Error_Handler();
 8000594:	f7ff ff44 	bl	8000420 <Error_Handler>
}
 8000598:	e7f6      	b.n	8000588 <MX_TIM2_Init+0x4c>
 800059a:	bf00      	nop
 800059c:	200001a8 	.word	0x200001a8

080005a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80005a0:	b500      	push	{lr}
 80005a2:	b08d      	sub	sp, #52	; 0x34
  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a4:	2300      	movs	r3, #0
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005aa:	4814      	ldr	r0, [pc, #80]	; (80005fc <MX_TIM3_Init+0x5c>)
 80005ac:	4a14      	ldr	r2, [pc, #80]	; (8000600 <MX_TIM3_Init+0x60>)
 80005ae:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 80005b0:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b2:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 80005b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b8:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ba:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005bc:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005be:	2201      	movs	r2, #1
 80005c0:	9203      	str	r2, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005c2:	9304      	str	r3, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005c4:	9205      	str	r2, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005c6:	9306      	str	r3, [sp, #24]
  sConfig.IC1Filter = 0;
 80005c8:	9307      	str	r3, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005ca:	9308      	str	r3, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005cc:	9209      	str	r2, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005ce:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005d0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80005d2:	a903      	add	r1, sp, #12
 80005d4:	f001 fa54 	bl	8001a80 <HAL_TIM_Encoder_Init>
 80005d8:	b950      	cbnz	r0, 80005f0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005da:	2300      	movs	r3, #0
 80005dc:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005de:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005e0:	a901      	add	r1, sp, #4
 80005e2:	4806      	ldr	r0, [pc, #24]	; (80005fc <MX_TIM3_Init+0x5c>)
 80005e4:	f001 fb44 	bl	8001c70 <HAL_TIMEx_MasterConfigSynchronization>
 80005e8:	b928      	cbnz	r0, 80005f6 <MX_TIM3_Init+0x56>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005ea:	b00d      	add	sp, #52	; 0x34
 80005ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80005f0:	f7ff ff16 	bl	8000420 <Error_Handler>
 80005f4:	e7f1      	b.n	80005da <MX_TIM3_Init+0x3a>
    Error_Handler();
 80005f6:	f7ff ff13 	bl	8000420 <Error_Handler>
}
 80005fa:	e7f6      	b.n	80005ea <MX_TIM3_Init+0x4a>
 80005fc:	20000118 	.word	0x20000118
 8000600:	40000400 	.word	0x40000400

08000604 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim4);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000604:	b082      	sub	sp, #8

  if(tim_pwmHandle->Instance==TIM1)
 8000606:	6803      	ldr	r3, [r0, #0]
 8000608:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <HAL_TIM_PWM_MspInit+0x40>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d004      	beq.n	8000618 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM4)
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <HAL_TIM_PWM_MspInit+0x44>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d00c      	beq.n	800062e <HAL_TIM_PWM_MspInit+0x2a>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000614:	b002      	add	sp, #8
 8000616:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_TIM_PWM_MspInit+0x48>)
 800061a:	699a      	ldr	r2, [r3, #24]
 800061c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000620:	619a      	str	r2, [r3, #24]
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	9b00      	ldr	r3, [sp, #0]
 800062c:	e7f2      	b.n	8000614 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <HAL_TIM_PWM_MspInit+0x48>)
 8000630:	69da      	ldr	r2, [r3, #28]
 8000632:	f042 0204 	orr.w	r2, r2, #4
 8000636:	61da      	str	r2, [r3, #28]
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	9b01      	ldr	r3, [sp, #4]
}
 8000642:	e7e7      	b.n	8000614 <HAL_TIM_PWM_MspInit+0x10>
 8000644:	40012c00 	.word	0x40012c00
 8000648:	40000800 	.word	0x40000800
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000650:	b510      	push	{r4, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	2300      	movs	r3, #0
 8000656:	9306      	str	r3, [sp, #24]
 8000658:	9307      	str	r3, [sp, #28]
 800065a:	9308      	str	r3, [sp, #32]
 800065c:	9309      	str	r3, [sp, #36]	; 0x24
  if(tim_encoderHandle->Instance==TIM2)
 800065e:	6803      	ldr	r3, [r0, #0]
 8000660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000664:	d004      	beq.n	8000670 <HAL_TIM_Encoder_MspInit+0x20>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_encoderHandle->Instance==TIM3)
 8000666:	4a35      	ldr	r2, [pc, #212]	; (800073c <HAL_TIM_Encoder_MspInit+0xec>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d042      	beq.n	80006f2 <HAL_TIM_Encoder_MspInit+0xa2>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800066c:	b00a      	add	sp, #40	; 0x28
 800066e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000670:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000674:	69da      	ldr	r2, [r3, #28]
 8000676:	f042 0201 	orr.w	r2, r2, #1
 800067a:	61da      	str	r2, [r3, #28]
 800067c:	69da      	ldr	r2, [r3, #28]
 800067e:	f002 0201 	and.w	r2, r2, #1
 8000682:	9201      	str	r2, [sp, #4]
 8000684:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	699a      	ldr	r2, [r3, #24]
 8000688:	f042 0204 	orr.w	r2, r2, #4
 800068c:	619a      	str	r2, [r3, #24]
 800068e:	699a      	ldr	r2, [r3, #24]
 8000690:	f002 0204 	and.w	r2, r2, #4
 8000694:	9202      	str	r2, [sp, #8]
 8000696:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000698:	699a      	ldr	r2, [r3, #24]
 800069a:	f042 0208 	orr.w	r2, r2, #8
 800069e:	619a      	str	r2, [r3, #24]
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	9303      	str	r3, [sp, #12]
 80006a8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006ae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2400      	movs	r4, #0
 80006b2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	a906      	add	r1, sp, #24
 80006b8:	4821      	ldr	r0, [pc, #132]	; (8000740 <HAL_TIM_Encoder_MspInit+0xf0>)
 80006ba:	f000 fae3 	bl	8000c84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006be:	2308      	movs	r3, #8
 80006c0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	a906      	add	r1, sp, #24
 80006c8:	481e      	ldr	r0, [pc, #120]	; (8000744 <HAL_TIM_Encoder_MspInit+0xf4>)
 80006ca:	f000 fadb 	bl	8000c84 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80006ce:	4a1e      	ldr	r2, [pc, #120]	; (8000748 <HAL_TIM_Encoder_MspInit+0xf8>)
 80006d0:	6853      	ldr	r3, [r2, #4]
 80006d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006de:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006e0:	4622      	mov	r2, r4
 80006e2:	4621      	mov	r1, r4
 80006e4:	201c      	movs	r0, #28
 80006e6:	f000 fa75 	bl	8000bd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006ea:	201c      	movs	r0, #28
 80006ec:	f000 faa6 	bl	8000c3c <HAL_NVIC_EnableIRQ>
 80006f0:	e7bc      	b.n	800066c <HAL_TIM_Encoder_MspInit+0x1c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <HAL_TIM_Encoder_MspInit+0xfc>)
 80006f4:	69da      	ldr	r2, [r3, #28]
 80006f6:	f042 0202 	orr.w	r2, r2, #2
 80006fa:	61da      	str	r2, [r3, #28]
 80006fc:	69da      	ldr	r2, [r3, #28]
 80006fe:	f002 0202 	and.w	r2, r2, #2
 8000702:	9204      	str	r2, [sp, #16]
 8000704:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	699a      	ldr	r2, [r3, #24]
 8000708:	f042 0204 	orr.w	r2, r2, #4
 800070c:	619a      	str	r2, [r3, #24]
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	9305      	str	r3, [sp, #20]
 8000716:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000718:	23c0      	movs	r3, #192	; 0xc0
 800071a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071c:	2400      	movs	r4, #0
 800071e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	a906      	add	r1, sp, #24
 8000724:	4806      	ldr	r0, [pc, #24]	; (8000740 <HAL_TIM_Encoder_MspInit+0xf0>)
 8000726:	f000 faad 	bl	8000c84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800072a:	4622      	mov	r2, r4
 800072c:	4621      	mov	r1, r4
 800072e:	201d      	movs	r0, #29
 8000730:	f000 fa50 	bl	8000bd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000734:	201d      	movs	r0, #29
 8000736:	f000 fa81 	bl	8000c3c <HAL_NVIC_EnableIRQ>
}
 800073a:	e797      	b.n	800066c <HAL_TIM_Encoder_MspInit+0x1c>
 800073c:	40000400 	.word	0x40000400
 8000740:	40010800 	.word	0x40010800
 8000744:	40010c00 	.word	0x40010c00
 8000748:	40010000 	.word	0x40010000
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000750:	b500      	push	{lr}
 8000752:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	2300      	movs	r3, #0
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	9303      	str	r3, [sp, #12]
 800075a:	9304      	str	r3, [sp, #16]
 800075c:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 800075e:	6803      	ldr	r3, [r0, #0]
 8000760:	4a19      	ldr	r2, [pc, #100]	; (80007c8 <HAL_TIM_MspPostInit+0x78>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d005      	beq.n	8000772 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM4)
 8000766:	4a19      	ldr	r2, [pc, #100]	; (80007cc <HAL_TIM_MspPostInit+0x7c>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d017      	beq.n	800079c <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800076c:	b007      	add	sp, #28
 800076e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_TIM_MspPostInit+0x80>)
 8000774:	699a      	ldr	r2, [r3, #24]
 8000776:	f042 0204 	orr.w	r2, r2, #4
 800077a:	619a      	str	r2, [r3, #24]
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000786:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800078a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	a902      	add	r1, sp, #8
 8000794:	480f      	ldr	r0, [pc, #60]	; (80007d4 <HAL_TIM_MspPostInit+0x84>)
 8000796:	f000 fa75 	bl	8000c84 <HAL_GPIO_Init>
 800079a:	e7e7      	b.n	800076c <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <HAL_TIM_MspPostInit+0x80>)
 800079e:	699a      	ldr	r2, [r3, #24]
 80007a0:	f042 0208 	orr.w	r2, r2, #8
 80007a4:	619a      	str	r2, [r3, #24]
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	a902      	add	r1, sp, #8
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <HAL_TIM_MspPostInit+0x88>)
 80007c0:	f000 fa60 	bl	8000c84 <HAL_GPIO_Init>
}
 80007c4:	e7d2      	b.n	800076c <HAL_TIM_MspPostInit+0x1c>
 80007c6:	bf00      	nop
 80007c8:	40012c00 	.word	0x40012c00
 80007cc:	40000800 	.word	0x40000800
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010800 	.word	0x40010800
 80007d8:	40010c00 	.word	0x40010c00

080007dc <MX_TIM1_Init>:
{
 80007dc:	b510      	push	{r4, lr}
 80007de:	b092      	sub	sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	2400      	movs	r4, #0
 80007e2:	9410      	str	r4, [sp, #64]	; 0x40
 80007e4:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e6:	9409      	str	r4, [sp, #36]	; 0x24
 80007e8:	940a      	str	r4, [sp, #40]	; 0x28
 80007ea:	940b      	str	r4, [sp, #44]	; 0x2c
 80007ec:	940c      	str	r4, [sp, #48]	; 0x30
 80007ee:	940d      	str	r4, [sp, #52]	; 0x34
 80007f0:	940e      	str	r4, [sp, #56]	; 0x38
 80007f2:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007f4:	2220      	movs	r2, #32
 80007f6:	4621      	mov	r1, r4
 80007f8:	a801      	add	r0, sp, #4
 80007fa:	f001 fb63 	bl	8001ec4 <memset>
  htim1.Instance = TIM1;
 80007fe:	4827      	ldr	r0, [pc, #156]	; (800089c <MX_TIM1_Init+0xc0>)
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <MX_TIM1_Init+0xc4>)
 8000802:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8000804:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000806:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 65535;
 8000808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080c:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000810:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000812:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000814:	f001 f908 	bl	8001a28 <HAL_TIM_PWM_Init>
 8000818:	2800      	cmp	r0, #0
 800081a:	d130      	bne.n	800087e <MX_TIM1_Init+0xa2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081c:	2300      	movs	r3, #0
 800081e:	9310      	str	r3, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000822:	a910      	add	r1, sp, #64	; 0x40
 8000824:	481d      	ldr	r0, [pc, #116]	; (800089c <MX_TIM1_Init+0xc0>)
 8000826:	f001 fa23 	bl	8001c70 <HAL_TIMEx_MasterConfigSynchronization>
 800082a:	2800      	cmp	r0, #0
 800082c:	d12a      	bne.n	8000884 <MX_TIM1_Init+0xa8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082e:	2360      	movs	r3, #96	; 0x60
 8000830:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000832:	2200      	movs	r2, #0
 8000834:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000836:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000838:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083a:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800083c:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800083e:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000840:	a909      	add	r1, sp, #36	; 0x24
 8000842:	4816      	ldr	r0, [pc, #88]	; (800089c <MX_TIM1_Init+0xc0>)
 8000844:	f001 f9ac 	bl	8001ba0 <HAL_TIM_PWM_ConfigChannel>
 8000848:	b9f8      	cbnz	r0, 800088a <MX_TIM1_Init+0xae>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800084a:	220c      	movs	r2, #12
 800084c:	a909      	add	r1, sp, #36	; 0x24
 800084e:	4813      	ldr	r0, [pc, #76]	; (800089c <MX_TIM1_Init+0xc0>)
 8000850:	f001 f9a6 	bl	8001ba0 <HAL_TIM_PWM_ConfigChannel>
 8000854:	b9e0      	cbnz	r0, 8000890 <MX_TIM1_Init+0xb4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800085a:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800085c:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800085e:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000860:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000866:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000868:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800086a:	a901      	add	r1, sp, #4
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <MX_TIM1_Init+0xc0>)
 800086e:	f001 fa3b 	bl	8001ce8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000872:	b980      	cbnz	r0, 8000896 <MX_TIM1_Init+0xba>
  HAL_TIM_MspPostInit(&htim1);
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <MX_TIM1_Init+0xc0>)
 8000876:	f7ff ff6b 	bl	8000750 <HAL_TIM_MspPostInit>
}
 800087a:	b012      	add	sp, #72	; 0x48
 800087c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800087e:	f7ff fdcf 	bl	8000420 <Error_Handler>
 8000882:	e7cb      	b.n	800081c <MX_TIM1_Init+0x40>
    Error_Handler();
 8000884:	f7ff fdcc 	bl	8000420 <Error_Handler>
 8000888:	e7d1      	b.n	800082e <MX_TIM1_Init+0x52>
    Error_Handler();
 800088a:	f7ff fdc9 	bl	8000420 <Error_Handler>
 800088e:	e7dc      	b.n	800084a <MX_TIM1_Init+0x6e>
    Error_Handler();
 8000890:	f7ff fdc6 	bl	8000420 <Error_Handler>
 8000894:	e7df      	b.n	8000856 <MX_TIM1_Init+0x7a>
    Error_Handler();
 8000896:	f7ff fdc3 	bl	8000420 <Error_Handler>
 800089a:	e7eb      	b.n	8000874 <MX_TIM1_Init+0x98>
 800089c:	20000160 	.word	0x20000160
 80008a0:	40012c00 	.word	0x40012c00

080008a4 <MX_TIM4_Init>:
{
 80008a4:	b500      	push	{lr}
 80008a6:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	2300      	movs	r3, #0
 80008aa:	9308      	str	r3, [sp, #32]
 80008ac:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	9302      	str	r3, [sp, #8]
 80008b2:	9303      	str	r3, [sp, #12]
 80008b4:	9304      	str	r3, [sp, #16]
 80008b6:	9305      	str	r3, [sp, #20]
 80008b8:	9306      	str	r3, [sp, #24]
 80008ba:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 80008bc:	481c      	ldr	r0, [pc, #112]	; (8000930 <MX_TIM4_Init+0x8c>)
 80008be:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <MX_TIM4_Init+0x90>)
 80008c0:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 80008c2:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 65535;
 80008c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ca:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008cc:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008d0:	f001 f8aa 	bl	8001a28 <HAL_TIM_PWM_Init>
 80008d4:	b9f8      	cbnz	r0, 8000916 <MX_TIM4_Init+0x72>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008dc:	a908      	add	r1, sp, #32
 80008de:	4814      	ldr	r0, [pc, #80]	; (8000930 <MX_TIM4_Init+0x8c>)
 80008e0:	f001 f9c6 	bl	8001c70 <HAL_TIMEx_MasterConfigSynchronization>
 80008e4:	b9d0      	cbnz	r0, 800091c <MX_TIM4_Init+0x78>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e6:	2360      	movs	r3, #96	; 0x60
 80008e8:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ee:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f0:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008f2:	2208      	movs	r2, #8
 80008f4:	a901      	add	r1, sp, #4
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <MX_TIM4_Init+0x8c>)
 80008f8:	f001 f952 	bl	8001ba0 <HAL_TIM_PWM_ConfigChannel>
 80008fc:	b988      	cbnz	r0, 8000922 <MX_TIM4_Init+0x7e>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008fe:	220c      	movs	r2, #12
 8000900:	a901      	add	r1, sp, #4
 8000902:	480b      	ldr	r0, [pc, #44]	; (8000930 <MX_TIM4_Init+0x8c>)
 8000904:	f001 f94c 	bl	8001ba0 <HAL_TIM_PWM_ConfigChannel>
 8000908:	b970      	cbnz	r0, 8000928 <MX_TIM4_Init+0x84>
  HAL_TIM_MspPostInit(&htim4);
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <MX_TIM4_Init+0x8c>)
 800090c:	f7ff ff20 	bl	8000750 <HAL_TIM_MspPostInit>
}
 8000910:	b00b      	add	sp, #44	; 0x2c
 8000912:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000916:	f7ff fd83 	bl	8000420 <Error_Handler>
 800091a:	e7dc      	b.n	80008d6 <MX_TIM4_Init+0x32>
    Error_Handler();
 800091c:	f7ff fd80 	bl	8000420 <Error_Handler>
 8000920:	e7e1      	b.n	80008e6 <MX_TIM4_Init+0x42>
    Error_Handler();
 8000922:	f7ff fd7d 	bl	8000420 <Error_Handler>
 8000926:	e7ea      	b.n	80008fe <MX_TIM4_Init+0x5a>
    Error_Handler();
 8000928:	f7ff fd7a 	bl	8000420 <Error_Handler>
 800092c:	e7ed      	b.n	800090a <MX_TIM4_Init+0x66>
 800092e:	bf00      	nop
 8000930:	200000d0 	.word	0x200000d0
 8000934:	40000800 	.word	0x40000800

08000938 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000938:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800093a:	480a      	ldr	r0, [pc, #40]	; (8000964 <MX_USART1_UART_Init+0x2c>)
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_USART1_UART_Init+0x30>)
 800093e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000940:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000944:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	2300      	movs	r3, #0
 8000948:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800094a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800094e:	220c      	movs	r2, #12
 8000950:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000956:	f001 fa3b 	bl	8001dd0 <HAL_UART_Init>
 800095a:	b900      	cbnz	r0, 800095e <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800095c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800095e:	f7ff fd5f 	bl	8000420 <Error_Handler>
}
 8000962:	e7fb      	b.n	800095c <MX_USART1_UART_Init+0x24>
 8000964:	20000234 	.word	0x20000234
 8000968:	40013800 	.word	0x40013800

0800096c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800096c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096e:	480a      	ldr	r0, [pc, #40]	; (8000998 <MX_USART2_UART_Init+0x2c>)
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_USART2_UART_Init+0x30>)
 8000972:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000974:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000978:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	2300      	movs	r3, #0
 800097c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000980:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000982:	220c      	movs	r2, #12
 8000984:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	f001 fa21 	bl	8001dd0 <HAL_UART_Init>
 800098e:	b900      	cbnz	r0, 8000992 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000990:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000992:	f7ff fd45 	bl	8000420 <Error_Handler>
}
 8000996:	e7fb      	b.n	8000990 <MX_USART2_UART_Init+0x24>
 8000998:	20000278 	.word	0x20000278
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009a0:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a2:	480a      	ldr	r0, [pc, #40]	; (80009cc <MX_USART3_UART_Init+0x2c>)
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_USART3_UART_Init+0x30>)
 80009a6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80009a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80009ac:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	2300      	movs	r3, #0
 80009b0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b6:	220c      	movs	r2, #12
 80009b8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009be:	f001 fa07 	bl	8001dd0 <HAL_UART_Init>
 80009c2:	b900      	cbnz	r0, 80009c6 <MX_USART3_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80009c6:	f7ff fd2b 	bl	8000420 <Error_Handler>
}
 80009ca:	e7fb      	b.n	80009c4 <MX_USART3_UART_Init+0x24>
 80009cc:	200001f0 	.word	0x200001f0
 80009d0:	40004800 	.word	0x40004800

080009d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009d4:	b510      	push	{r4, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	2300      	movs	r3, #0
 80009da:	9306      	str	r3, [sp, #24]
 80009dc:	9307      	str	r3, [sp, #28]
 80009de:	9308      	str	r3, [sp, #32]
 80009e0:	9309      	str	r3, [sp, #36]	; 0x24
  if(uartHandle->Instance==USART1)
 80009e2:	6803      	ldr	r3, [r0, #0]
 80009e4:	4a47      	ldr	r2, [pc, #284]	; (8000b04 <HAL_UART_MspInit+0x130>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d007      	beq.n	80009fa <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80009ea:	4a47      	ldr	r2, [pc, #284]	; (8000b08 <HAL_UART_MspInit+0x134>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d02e      	beq.n	8000a4e <HAL_UART_MspInit+0x7a>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 80009f0:	4a46      	ldr	r2, [pc, #280]	; (8000b0c <HAL_UART_MspInit+0x138>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d053      	beq.n	8000a9e <HAL_UART_MspInit+0xca>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80009f6:	b00a      	add	sp, #40	; 0x28
 80009f8:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fa:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <HAL_UART_MspInit+0x13c>)
 80009fc:	699a      	ldr	r2, [r3, #24]
 80009fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a02:	619a      	str	r2, [r3, #24]
 8000a04:	699a      	ldr	r2, [r3, #24]
 8000a06:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a0a:	9200      	str	r2, [sp, #0]
 8000a0c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	699a      	ldr	r2, [r3, #24]
 8000a10:	f042 0204 	orr.w	r2, r2, #4
 8000a14:	619a      	str	r2, [r3, #24]
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a24:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	4c39      	ldr	r4, [pc, #228]	; (8000b14 <HAL_UART_MspInit+0x140>)
 8000a30:	a906      	add	r1, sp, #24
 8000a32:	4620      	mov	r0, r4
 8000a34:	f000 f926 	bl	8000c84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a3c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	a906      	add	r1, sp, #24
 8000a46:	4620      	mov	r0, r4
 8000a48:	f000 f91c 	bl	8000c84 <HAL_GPIO_Init>
 8000a4c:	e7d3      	b.n	80009f6 <HAL_UART_MspInit+0x22>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4e:	4b30      	ldr	r3, [pc, #192]	; (8000b10 <HAL_UART_MspInit+0x13c>)
 8000a50:	69da      	ldr	r2, [r3, #28]
 8000a52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a56:	61da      	str	r2, [r3, #28]
 8000a58:	69da      	ldr	r2, [r3, #28]
 8000a5a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000a5e:	9202      	str	r2, [sp, #8]
 8000a60:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	699a      	ldr	r2, [r3, #24]
 8000a64:	f042 0204 	orr.w	r2, r2, #4
 8000a68:	619a      	str	r2, [r3, #24]
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	9303      	str	r3, [sp, #12]
 8000a72:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a74:	2304      	movs	r3, #4
 8000a76:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	4c24      	ldr	r4, [pc, #144]	; (8000b14 <HAL_UART_MspInit+0x140>)
 8000a82:	a906      	add	r1, sp, #24
 8000a84:	4620      	mov	r0, r4
 8000a86:	f000 f8fd 	bl	8000c84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	a906      	add	r1, sp, #24
 8000a96:	4620      	mov	r0, r4
 8000a98:	f000 f8f4 	bl	8000c84 <HAL_GPIO_Init>
 8000a9c:	e7ab      	b.n	80009f6 <HAL_UART_MspInit+0x22>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <HAL_UART_MspInit+0x13c>)
 8000aa0:	69da      	ldr	r2, [r3, #28]
 8000aa2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000aa6:	61da      	str	r2, [r3, #28]
 8000aa8:	69da      	ldr	r2, [r3, #28]
 8000aaa:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000aae:	9204      	str	r2, [sp, #16]
 8000ab0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	699a      	ldr	r2, [r3, #24]
 8000ab4:	f042 0210 	orr.w	r2, r2, #16
 8000ab8:	619a      	str	r2, [r3, #24]
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0310 	and.w	r3, r3, #16
 8000ac0:	9305      	str	r3, [sp, #20]
 8000ac2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad2:	4c11      	ldr	r4, [pc, #68]	; (8000b18 <HAL_UART_MspInit+0x144>)
 8000ad4:	a906      	add	r1, sp, #24
 8000ad6:	4620      	mov	r0, r4
 8000ad8:	f000 f8d4 	bl	8000c84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ae0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	a906      	add	r1, sp, #24
 8000aea:	4620      	mov	r0, r4
 8000aec:	f000 f8ca 	bl	8000c84 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_UART_MspInit+0x148>)
 8000af2:	6853      	ldr	r3, [r2, #4]
 8000af4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000af8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6053      	str	r3, [r2, #4]
}
 8000b02:	e778      	b.n	80009f6 <HAL_UART_MspInit+0x22>
 8000b04:	40013800 	.word	0x40013800
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40004800 	.word	0x40004800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40011000 	.word	0x40011000
 8000b1c:	40010000 	.word	0x40010000

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b510      	push	{r4, lr}
 8000b22:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_InitTick+0x40>)
 8000b26:	7818      	ldrb	r0, [r3, #0]
 8000b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b30:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <HAL_InitTick+0x44>)
 8000b32:	6810      	ldr	r0, [r2, #0]
 8000b34:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b38:	f000 f88e 	bl	8000c58 <HAL_SYSTICK_Config>
 8000b3c:	b968      	cbnz	r0, 8000b5a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	2c0f      	cmp	r4, #15
 8000b40:	d901      	bls.n	8000b46 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b42:	2001      	movs	r0, #1
 8000b44:	e00a      	b.n	8000b5c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b46:	2200      	movs	r2, #0
 8000b48:	4621      	mov	r1, r4
 8000b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4e:	f000 f841 	bl	8000bd4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b52:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_InitTick+0x40>)
 8000b54:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2000      	movs	r0, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b5a:	2001      	movs	r0, #1
}
 8000b5c:	bd10      	pop	{r4, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000004 	.word	0x20000004
 8000b64:	20000000 	.word	0x20000000

08000b68 <HAL_Init>:
{
 8000b68:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6a:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x20>)
 8000b6c:	6813      	ldr	r3, [r2, #0]
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f81b 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ffd0 	bl	8000b20 <HAL_InitTick>
  HAL_MspInit();
 8000b80:	f7ff fc9c 	bl	80004bc <HAL_MspInit>
}
 8000b84:	2000      	movs	r0, #0
 8000b86:	bd08      	pop	{r3, pc}
 8000b88:	40022000 	.word	0x40022000

08000b8c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b8c:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <HAL_IncTick+0x10>)
 8000b8e:	6811      	ldr	r1, [r2, #0]
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_IncTick+0x14>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	440b      	add	r3, r1
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	200002bc 	.word	0x200002bc
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ba4:	4b01      	ldr	r3, [pc, #4]	; (8000bac <HAL_GetTick+0x8>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200002bc 	.word	0x200002bc

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bb2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bb8:	041b      	lsls	r3, r3, #16
 8000bba:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bbc:	0200      	lsls	r0, r0, #8
 8000bbe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bcc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_NVIC_SetPriority+0x60>)
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bde:	f1c3 0407 	rsb	r4, r3, #7
 8000be2:	2c04      	cmp	r4, #4
 8000be4:	bf28      	it	cs
 8000be6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be8:	1d1d      	adds	r5, r3, #4
 8000bea:	2d06      	cmp	r5, #6
 8000bec:	d918      	bls.n	8000c20 <HAL_NVIC_SetPriority+0x4c>
 8000bee:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	f04f 35ff 	mov.w	r5, #4294967295
 8000bf4:	fa05 f404 	lsl.w	r4, r5, r4
 8000bf8:	ea21 0104 	bic.w	r1, r1, r4
 8000bfc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfe:	fa05 f303 	lsl.w	r3, r5, r3
 8000c02:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c06:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	db0b      	blt.n	8000c24 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	0109      	lsls	r1, r1, #4
 8000c0e:	b2c9      	uxtb	r1, r1
 8000c10:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c14:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c18:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c1c:	bc30      	pop	{r4, r5}
 8000c1e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c20:	2300      	movs	r3, #0
 8000c22:	e7e5      	b.n	8000bf0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	f000 000f 	and.w	r0, r0, #15
 8000c28:	0109      	lsls	r1, r1, #4
 8000c2a:	b2c9      	uxtb	r1, r1
 8000c2c:	4b02      	ldr	r3, [pc, #8]	; (8000c38 <HAL_NVIC_SetPriority+0x64>)
 8000c2e:	5419      	strb	r1, [r3, r0]
 8000c30:	e7f4      	b.n	8000c1c <HAL_NVIC_SetPriority+0x48>
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00
 8000c38:	e000ed14 	.word	0xe000ed14

08000c3c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	db07      	blt.n	8000c50 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c40:	f000 021f 	and.w	r2, r0, #31
 8000c44:	0940      	lsrs	r0, r0, #5
 8000c46:	2301      	movs	r3, #1
 8000c48:	4093      	lsls	r3, r2
 8000c4a:	4a02      	ldr	r2, [pc, #8]	; (8000c54 <HAL_NVIC_EnableIRQ+0x18>)
 8000c4c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	3801      	subs	r0, #1
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5e:	d20a      	bcs.n	8000c76 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_SYSTICK_Config+0x24>)
 8000c62:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_SYSTICK_Config+0x28>)
 8000c66:	21f0      	movs	r1, #240	; 0xf0
 8000c68:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b4f0      	push	{r4, r5, r6, r7}
 8000c86:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c88:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 8000c8a:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8c:	e0ab      	b.n	8000de6 <HAL_GPIO_Init+0x162>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c8e:	4f85      	ldr	r7, [pc, #532]	; (8000ea4 <HAL_GPIO_Init+0x220>)
 8000c90:	42bb      	cmp	r3, r7
 8000c92:	d010      	beq.n	8000cb6 <HAL_GPIO_Init+0x32>
 8000c94:	d907      	bls.n	8000ca6 <HAL_GPIO_Init+0x22>
 8000c96:	4f84      	ldr	r7, [pc, #528]	; (8000ea8 <HAL_GPIO_Init+0x224>)
 8000c98:	42bb      	cmp	r3, r7
 8000c9a:	d00c      	beq.n	8000cb6 <HAL_GPIO_Init+0x32>
 8000c9c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000ca0:	42bb      	cmp	r3, r7
 8000ca2:	d008      	beq.n	8000cb6 <HAL_GPIO_Init+0x32>
 8000ca4:	e013      	b.n	8000cce <HAL_GPIO_Init+0x4a>
 8000ca6:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000caa:	42bb      	cmp	r3, r7
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x32>
 8000cae:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8000cb2:	42bb      	cmp	r3, r7
 8000cb4:	d107      	bne.n	8000cc6 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cb6:	688b      	ldr	r3, [r1, #8]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d060      	beq.n	8000d7e <HAL_GPIO_Init+0xfa>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d059      	beq.n	8000d74 <HAL_GPIO_Init+0xf0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000cc0:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc2:	2508      	movs	r5, #8
 8000cc4:	e003      	b.n	8000cce <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000cc6:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000cca:	42bb      	cmp	r3, r7
 8000ccc:	d0f3      	beq.n	8000cb6 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cce:	2eff      	cmp	r6, #255	; 0xff
 8000cd0:	d857      	bhi.n	8000d82 <HAL_GPIO_Init+0xfe>
 8000cd2:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cd4:	2eff      	cmp	r6, #255	; 0xff
 8000cd6:	d857      	bhi.n	8000d88 <HAL_GPIO_Init+0x104>
 8000cd8:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cda:	f8dc 3000 	ldr.w	r3, [ip]
 8000cde:	270f      	movs	r7, #15
 8000ce0:	4097      	lsls	r7, r2
 8000ce2:	ea23 0307 	bic.w	r3, r3, r7
 8000ce6:	fa05 f202 	lsl.w	r2, r5, r2
 8000cea:	4313      	orrs	r3, r2
 8000cec:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cf0:	684b      	ldr	r3, [r1, #4]
 8000cf2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000cf6:	d075      	beq.n	8000de4 <HAL_GPIO_Init+0x160>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf8:	4b6c      	ldr	r3, [pc, #432]	; (8000eac <HAL_GPIO_Init+0x228>)
 8000cfa:	699a      	ldr	r2, [r3, #24]
 8000cfc:	f042 0201 	orr.w	r2, r2, #1
 8000d00:	619a      	str	r2, [r3, #24]
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000d0c:	08a2      	lsrs	r2, r4, #2
 8000d0e:	1c97      	adds	r7, r2, #2
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <HAL_GPIO_Init+0x22c>)
 8000d12:	f853 c027 	ldr.w	ip, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d16:	f004 0303 	and.w	r3, r4, #3
 8000d1a:	009f      	lsls	r7, r3, #2
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	40bb      	lsls	r3, r7
 8000d20:	ea2c 0c03 	bic.w	ip, ip, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d24:	4b63      	ldr	r3, [pc, #396]	; (8000eb4 <HAL_GPIO_Init+0x230>)
 8000d26:	4298      	cmp	r0, r3
 8000d28:	d034      	beq.n	8000d94 <HAL_GPIO_Init+0x110>
 8000d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	f000 8094 	beq.w	8000e5c <HAL_GPIO_Init+0x1d8>
 8000d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	f000 8091 	beq.w	8000e60 <HAL_GPIO_Init+0x1dc>
 8000d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d42:	4298      	cmp	r0, r3
 8000d44:	f000 808e 	beq.w	8000e64 <HAL_GPIO_Init+0x1e0>
 8000d48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f000 808b 	beq.w	8000e68 <HAL_GPIO_Init+0x1e4>
 8000d52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d01a      	beq.n	8000d90 <HAL_GPIO_Init+0x10c>
 8000d5a:	2306      	movs	r3, #6
 8000d5c:	e01b      	b.n	8000d96 <HAL_GPIO_Init+0x112>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d5e:	68cd      	ldr	r5, [r1, #12]
          break;
 8000d60:	e7b5      	b.n	8000cce <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d62:	68cd      	ldr	r5, [r1, #12]
 8000d64:	3504      	adds	r5, #4
          break;
 8000d66:	e7b2      	b.n	8000cce <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d68:	68cd      	ldr	r5, [r1, #12]
 8000d6a:	3508      	adds	r5, #8
          break;
 8000d6c:	e7af      	b.n	8000cce <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d6e:	68cd      	ldr	r5, [r1, #12]
 8000d70:	350c      	adds	r5, #12
          break;
 8000d72:	e7ac      	b.n	8000cce <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8000d74:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d76:	2508      	movs	r5, #8
 8000d78:	e7a9      	b.n	8000cce <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d7a:	2500      	movs	r5, #0
 8000d7c:	e7a7      	b.n	8000cce <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d7e:	2504      	movs	r5, #4
 8000d80:	e7a5      	b.n	8000cce <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d82:	f100 0c04 	add.w	ip, r0, #4
 8000d86:	e7a5      	b.n	8000cd4 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d88:	f1a4 0208 	sub.w	r2, r4, #8
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	e7a4      	b.n	8000cda <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d90:	2305      	movs	r3, #5
 8000d92:	e000      	b.n	8000d96 <HAL_GPIO_Init+0x112>
 8000d94:	2300      	movs	r3, #0
 8000d96:	40bb      	lsls	r3, r7
 8000d98:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8000d9c:	3202      	adds	r2, #2
 8000d9e:	4f44      	ldr	r7, [pc, #272]	; (8000eb0 <HAL_GPIO_Init+0x22c>)
 8000da0:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da4:	684b      	ldr	r3, [r1, #4]
 8000da6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000daa:	d05f      	beq.n	8000e6c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dac:	4a42      	ldr	r2, [pc, #264]	; (8000eb8 <HAL_GPIO_Init+0x234>)
 8000dae:	6813      	ldr	r3, [r2, #0]
 8000db0:	4333      	orrs	r3, r6
 8000db2:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000db4:	684b      	ldr	r3, [r1, #4]
 8000db6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000dba:	d05d      	beq.n	8000e78 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dbc:	4a3e      	ldr	r2, [pc, #248]	; (8000eb8 <HAL_GPIO_Init+0x234>)
 8000dbe:	6853      	ldr	r3, [r2, #4]
 8000dc0:	4333      	orrs	r3, r6
 8000dc2:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc4:	684b      	ldr	r3, [r1, #4]
 8000dc6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000dca:	d05b      	beq.n	8000e84 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dcc:	4a3a      	ldr	r2, [pc, #232]	; (8000eb8 <HAL_GPIO_Init+0x234>)
 8000dce:	6893      	ldr	r3, [r2, #8]
 8000dd0:	4333      	orrs	r3, r6
 8000dd2:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd4:	684b      	ldr	r3, [r1, #4]
 8000dd6:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000dda:	d059      	beq.n	8000e90 <HAL_GPIO_Init+0x20c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ddc:	4a36      	ldr	r2, [pc, #216]	; (8000eb8 <HAL_GPIO_Init+0x234>)
 8000dde:	68d3      	ldr	r3, [r2, #12]
 8000de0:	431e      	orrs	r6, r3
 8000de2:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000de4:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de6:	680b      	ldr	r3, [r1, #0]
 8000de8:	fa33 f204 	lsrs.w	r2, r3, r4
 8000dec:	d056      	beq.n	8000e9c <HAL_GPIO_Init+0x218>
    ioposition = (0x01uL << position);
 8000dee:	2201      	movs	r2, #1
 8000df0:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 8000df6:	ea32 0303 	bics.w	r3, r2, r3
 8000dfa:	d1f3      	bne.n	8000de4 <HAL_GPIO_Init+0x160>
      switch (GPIO_Init->Mode)
 8000dfc:	684b      	ldr	r3, [r1, #4]
 8000dfe:	2b12      	cmp	r3, #18
 8000e00:	f63f af45 	bhi.w	8000c8e <HAL_GPIO_Init+0xa>
 8000e04:	2b12      	cmp	r3, #18
 8000e06:	f63f af62 	bhi.w	8000cce <HAL_GPIO_Init+0x4a>
 8000e0a:	a701      	add	r7, pc, #4	; (adr r7, 8000e10 <HAL_GPIO_Init+0x18c>)
 8000e0c:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 8000e10:	08000cb7 	.word	0x08000cb7
 8000e14:	08000d5f 	.word	0x08000d5f
 8000e18:	08000d69 	.word	0x08000d69
 8000e1c:	08000d7b 	.word	0x08000d7b
 8000e20:	08000ccf 	.word	0x08000ccf
 8000e24:	08000ccf 	.word	0x08000ccf
 8000e28:	08000ccf 	.word	0x08000ccf
 8000e2c:	08000ccf 	.word	0x08000ccf
 8000e30:	08000ccf 	.word	0x08000ccf
 8000e34:	08000ccf 	.word	0x08000ccf
 8000e38:	08000ccf 	.word	0x08000ccf
 8000e3c:	08000ccf 	.word	0x08000ccf
 8000e40:	08000ccf 	.word	0x08000ccf
 8000e44:	08000ccf 	.word	0x08000ccf
 8000e48:	08000ccf 	.word	0x08000ccf
 8000e4c:	08000ccf 	.word	0x08000ccf
 8000e50:	08000ccf 	.word	0x08000ccf
 8000e54:	08000d63 	.word	0x08000d63
 8000e58:	08000d6f 	.word	0x08000d6f
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e79a      	b.n	8000d96 <HAL_GPIO_Init+0x112>
 8000e60:	2302      	movs	r3, #2
 8000e62:	e798      	b.n	8000d96 <HAL_GPIO_Init+0x112>
 8000e64:	2303      	movs	r3, #3
 8000e66:	e796      	b.n	8000d96 <HAL_GPIO_Init+0x112>
 8000e68:	2304      	movs	r3, #4
 8000e6a:	e794      	b.n	8000d96 <HAL_GPIO_Init+0x112>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <HAL_GPIO_Init+0x234>)
 8000e6e:	6813      	ldr	r3, [r2, #0]
 8000e70:	ea23 0306 	bic.w	r3, r3, r6
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e79d      	b.n	8000db4 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e78:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <HAL_GPIO_Init+0x234>)
 8000e7a:	6853      	ldr	r3, [r2, #4]
 8000e7c:	ea23 0306 	bic.w	r3, r3, r6
 8000e80:	6053      	str	r3, [r2, #4]
 8000e82:	e79f      	b.n	8000dc4 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e84:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <HAL_GPIO_Init+0x234>)
 8000e86:	6893      	ldr	r3, [r2, #8]
 8000e88:	ea23 0306 	bic.w	r3, r3, r6
 8000e8c:	6093      	str	r3, [r2, #8]
 8000e8e:	e7a1      	b.n	8000dd4 <HAL_GPIO_Init+0x150>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e90:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <HAL_GPIO_Init+0x234>)
 8000e92:	68d3      	ldr	r3, [r2, #12]
 8000e94:	ea23 0606 	bic.w	r6, r3, r6
 8000e98:	60d6      	str	r6, [r2, #12]
 8000e9a:	e7a3      	b.n	8000de4 <HAL_GPIO_Init+0x160>
  }
}
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	10220000 	.word	0x10220000
 8000ea8:	10310000 	.word	0x10310000
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40010400 	.word	0x40010400

08000ebc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ebc:	b10a      	cbz	r2, 8000ec2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ebe:	6101      	str	r1, [r0, #16]
 8000ec0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ec2:	0409      	lsls	r1, r1, #16
 8000ec4:	6101      	str	r1, [r0, #16]
  }
}
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	f000 80cc 	beq.w	8001066 <HAL_I2C_Init+0x19e>
{
 8000ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed0:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ed2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d077      	beq.n	8000fca <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eda:	2324      	movs	r3, #36	; 0x24
 8000edc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ee0:	6822      	ldr	r2, [r4, #0]
 8000ee2:	6813      	ldr	r3, [r2, #0]
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000eea:	6822      	ldr	r2, [r4, #0]
 8000eec:	6813      	ldr	r3, [r2, #0]
 8000eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ef4:	6822      	ldr	r2, [r4, #0]
 8000ef6:	6813      	ldr	r3, [r2, #0]
 8000ef8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000efc:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000efe:	f000 fbd1 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f02:	6862      	ldr	r2, [r4, #4]
 8000f04:	4b5a      	ldr	r3, [pc, #360]	; (8001070 <HAL_I2C_Init+0x1a8>)
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d864      	bhi.n	8000fd4 <HAL_I2C_Init+0x10c>
 8000f0a:	4b5a      	ldr	r3, [pc, #360]	; (8001074 <HAL_I2C_Init+0x1ac>)
 8000f0c:	4298      	cmp	r0, r3
 8000f0e:	bf8c      	ite	hi
 8000f10:	2300      	movhi	r3, #0
 8000f12:	2301      	movls	r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f040 80a8 	bne.w	800106a <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f1a:	4d57      	ldr	r5, [pc, #348]	; (8001078 <HAL_I2C_Init+0x1b0>)
 8000f1c:	fba5 3500 	umull	r3, r5, r5, r0
 8000f20:	0caf      	lsrs	r7, r5, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f22:	6826      	ldr	r6, [r4, #0]
 8000f24:	6871      	ldr	r1, [r6, #4]
 8000f26:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000f2a:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8000f2e:	6071      	str	r1, [r6, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f30:	6821      	ldr	r1, [r4, #0]
 8000f32:	6a0b      	ldr	r3, [r1, #32]
 8000f34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f38:	6865      	ldr	r5, [r4, #4]
 8000f3a:	4a4d      	ldr	r2, [pc, #308]	; (8001070 <HAL_I2C_Init+0x1a8>)
 8000f3c:	4295      	cmp	r5, r2
 8000f3e:	d84f      	bhi.n	8000fe0 <HAL_I2C_Init+0x118>
 8000f40:	1c7a      	adds	r2, r7, #1
 8000f42:	4313      	orrs	r3, r2
 8000f44:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f46:	6825      	ldr	r5, [r4, #0]
 8000f48:	69e9      	ldr	r1, [r5, #28]
 8000f4a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000f4e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f52:	6863      	ldr	r3, [r4, #4]
 8000f54:	4a46      	ldr	r2, [pc, #280]	; (8001070 <HAL_I2C_Init+0x1a8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d84c      	bhi.n	8000ff4 <HAL_I2C_Init+0x12c>
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f62:	3001      	adds	r0, #1
 8000f64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f68:	4218      	tst	r0, r3
 8000f6a:	d078      	beq.n	800105e <HAL_I2C_Init+0x196>
 8000f6c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000f70:	430b      	orrs	r3, r1
 8000f72:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f74:	6821      	ldr	r1, [r4, #0]
 8000f76:	680b      	ldr	r3, [r1, #0]
 8000f78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000f7c:	69e2      	ldr	r2, [r4, #28]
 8000f7e:	6a20      	ldr	r0, [r4, #32]
 8000f80:	4302      	orrs	r2, r0
 8000f82:	4313      	orrs	r3, r2
 8000f84:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f86:	6821      	ldr	r1, [r4, #0]
 8000f88:	688b      	ldr	r3, [r1, #8]
 8000f8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f92:	6922      	ldr	r2, [r4, #16]
 8000f94:	68e0      	ldr	r0, [r4, #12]
 8000f96:	4302      	orrs	r2, r0
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f9c:	6821      	ldr	r1, [r4, #0]
 8000f9e:	68cb      	ldr	r3, [r1, #12]
 8000fa0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fa4:	6962      	ldr	r2, [r4, #20]
 8000fa6:	69a0      	ldr	r0, [r4, #24]
 8000fa8:	4302      	orrs	r2, r0
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fae:	6822      	ldr	r2, [r4, #0]
 8000fb0:	6813      	ldr	r3, [r2, #0]
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fb8:	2000      	movs	r0, #0
 8000fba:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000fbc:	2320      	movs	r3, #32
 8000fbe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fc2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fc4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 8000fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000fca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000fce:	f7ff f9d1 	bl	8000374 <HAL_I2C_MspInit>
 8000fd2:	e782      	b.n	8000eda <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <HAL_I2C_Init+0x1b4>)
 8000fd6:	4298      	cmp	r0, r3
 8000fd8:	bf8c      	ite	hi
 8000fda:	2300      	movhi	r3, #0
 8000fdc:	2301      	movls	r3, #1
 8000fde:	e799      	b.n	8000f14 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fe0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fe4:	fb02 f207 	mul.w	r2, r2, r7
 8000fe8:	4d25      	ldr	r5, [pc, #148]	; (8001080 <HAL_I2C_Init+0x1b8>)
 8000fea:	fba5 5202 	umull	r5, r2, r5, r2
 8000fee:	0992      	lsrs	r2, r2, #6
 8000ff0:	3201      	adds	r2, #1
 8000ff2:	e7a6      	b.n	8000f42 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ff4:	68a2      	ldr	r2, [r4, #8]
 8000ff6:	b9ba      	cbnz	r2, 8001028 <HAL_I2C_Init+0x160>
 8000ff8:	1e46      	subs	r6, r0, #1
 8000ffa:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8000ffe:	fbb6 f6f7 	udiv	r6, r6, r7
 8001002:	3601      	adds	r6, #1
 8001004:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001008:	fab6 f686 	clz	r6, r6
 800100c:	0976      	lsrs	r6, r6, #5
 800100e:	bb46      	cbnz	r6, 8001062 <HAL_I2C_Init+0x19a>
 8001010:	b9c2      	cbnz	r2, 8001044 <HAL_I2C_Init+0x17c>
 8001012:	1e42      	subs	r2, r0, #1
 8001014:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001018:	fbb2 f2f3 	udiv	r2, r2, r3
 800101c:	3201      	adds	r2, #1
 800101e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001022:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8001026:	e7a3      	b.n	8000f70 <HAL_I2C_Init+0xa8>
 8001028:	1e46      	subs	r6, r0, #1
 800102a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800102e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001032:	fbb6 f6f7 	udiv	r6, r6, r7
 8001036:	3601      	adds	r6, #1
 8001038:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800103c:	fab6 f686 	clz	r6, r6
 8001040:	0976      	lsrs	r6, r6, #5
 8001042:	e7e4      	b.n	800100e <HAL_I2C_Init+0x146>
 8001044:	1e42      	subs	r2, r0, #1
 8001046:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800104a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800104e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001052:	3201      	adds	r2, #1
 8001054:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001058:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 800105c:	e788      	b.n	8000f70 <HAL_I2C_Init+0xa8>
 800105e:	2304      	movs	r3, #4
 8001060:	e786      	b.n	8000f70 <HAL_I2C_Init+0xa8>
 8001062:	2301      	movs	r3, #1
 8001064:	e784      	b.n	8000f70 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001066:	2001      	movs	r0, #1
}
 8001068:	4770      	bx	lr
    return HAL_ERROR;
 800106a:	2001      	movs	r0, #1
 800106c:	e7ac      	b.n	8000fc8 <HAL_I2C_Init+0x100>
 800106e:	bf00      	nop
 8001070:	000186a0 	.word	0x000186a0
 8001074:	001e847f 	.word	0x001e847f
 8001078:	431bde83 	.word	0x431bde83
 800107c:	003d08ff 	.word	0x003d08ff
 8001080:	10624dd3 	.word	0x10624dd3

08001084 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001084:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <RCC_Delay+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <RCC_Delay+0x28>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	0a5b      	lsrs	r3, r3, #9
 8001092:	fb00 f303 	mul.w	r3, r0, r3
 8001096:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001098:	bf00      	nop
  }
  while (Delay --);
 800109a:	9b01      	ldr	r3, [sp, #4]
 800109c:	1e5a      	subs	r2, r3, #1
 800109e:	9201      	str	r2, [sp, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f9      	bne.n	8001098 <RCC_Delay+0x14>
}
 80010a4:	b002      	add	sp, #8
 80010a6:	4770      	bx	lr
 80010a8:	20000000 	.word	0x20000000
 80010ac:	10624dd3 	.word	0x10624dd3

080010b0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80010b0:	2800      	cmp	r0, #0
 80010b2:	f000 81f1 	beq.w	8001498 <HAL_RCC_OscConfig+0x3e8>
{
 80010b6:	b570      	push	{r4, r5, r6, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010bc:	6803      	ldr	r3, [r0, #0]
 80010be:	f013 0f01 	tst.w	r3, #1
 80010c2:	d02c      	beq.n	800111e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c4:	4baa      	ldr	r3, [pc, #680]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 030c 	and.w	r3, r3, #12
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d01d      	beq.n	800110c <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d0:	4ba7      	ldr	r3, [pc, #668]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d012      	beq.n	8001102 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010dc:	6863      	ldr	r3, [r4, #4]
 80010de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e2:	d041      	beq.n	8001168 <HAL_RCC_OscConfig+0xb8>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d155      	bne.n	8001194 <HAL_RCC_OscConfig+0xe4>
 80010e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010ec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e037      	b.n	8001172 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001102:	4b9b      	ldr	r3, [pc, #620]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800110a:	d0e7      	beq.n	80010dc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	4b98      	ldr	r3, [pc, #608]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001114:	d003      	beq.n	800111e <HAL_RCC_OscConfig+0x6e>
 8001116:	6863      	ldr	r3, [r4, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 81bf 	beq.w	800149c <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	f013 0f02 	tst.w	r3, #2
 8001124:	d075      	beq.n	8001212 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001126:	4b92      	ldr	r3, [pc, #584]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f013 0f0c 	tst.w	r3, #12
 800112e:	d05f      	beq.n	80011f0 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001130:	4b8f      	ldr	r3, [pc, #572]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b08      	cmp	r3, #8
 800113a:	d054      	beq.n	80011e6 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800113c:	6923      	ldr	r3, [r4, #16]
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 8089 	beq.w	8001256 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8001144:	4b8b      	ldr	r3, [pc, #556]	; (8001374 <HAL_RCC_OscConfig+0x2c4>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800114a:	f7ff fd2b 	bl	8000ba4 <HAL_GetTick>
 800114e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001150:	4b87      	ldr	r3, [pc, #540]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f013 0f02 	tst.w	r3, #2
 8001158:	d174      	bne.n	8001244 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800115a:	f7ff fd23 	bl	8000ba4 <HAL_GetTick>
 800115e:	1b40      	subs	r0, r0, r5
 8001160:	2802      	cmp	r0, #2
 8001162:	d9f5      	bls.n	8001150 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8001164:	2003      	movs	r0, #3
 8001166:	e19e      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001168:	4a81      	ldr	r2, [pc, #516]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 800116a:	6813      	ldr	r3, [r2, #0]
 800116c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001170:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001172:	6863      	ldr	r3, [r4, #4]
 8001174:	b343      	cbz	r3, 80011c8 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8001176:	f7ff fd15 	bl	8000ba4 <HAL_GetTick>
 800117a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117c:	4b7c      	ldr	r3, [pc, #496]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001184:	d1cb      	bne.n	800111e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001186:	f7ff fd0d 	bl	8000ba4 <HAL_GetTick>
 800118a:	1b40      	subs	r0, r0, r5
 800118c:	2864      	cmp	r0, #100	; 0x64
 800118e:	d9f5      	bls.n	800117c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001190:	2003      	movs	r0, #3
 8001192:	e188      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001198:	d009      	beq.n	80011ae <HAL_RCC_OscConfig+0xfe>
 800119a:	4b75      	ldr	r3, [pc, #468]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	e7e1      	b.n	8001172 <HAL_RCC_OscConfig+0xc2>
 80011ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011b2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	e7d4      	b.n	8001172 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 80011c8:	f7ff fcec 	bl	8000ba4 <HAL_GetTick>
 80011cc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	4b68      	ldr	r3, [pc, #416]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011d6:	d0a2      	beq.n	800111e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fce4 	bl	8000ba4 <HAL_GetTick>
 80011dc:	1b40      	subs	r0, r0, r5
 80011de:	2864      	cmp	r0, #100	; 0x64
 80011e0:	d9f5      	bls.n	80011ce <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80011e2:	2003      	movs	r0, #3
 80011e4:	e15f      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011e6:	4b62      	ldr	r3, [pc, #392]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80011ee:	d1a5      	bne.n	800113c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f0:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f013 0f02 	tst.w	r3, #2
 80011f8:	d003      	beq.n	8001202 <HAL_RCC_OscConfig+0x152>
 80011fa:	6923      	ldr	r3, [r4, #16]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	f040 814f 	bne.w	80014a0 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	4a5b      	ldr	r2, [pc, #364]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 8001204:	6813      	ldr	r3, [r2, #0]
 8001206:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800120a:	6961      	ldr	r1, [r4, #20]
 800120c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001210:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	f013 0f08 	tst.w	r3, #8
 8001218:	d032      	beq.n	8001280 <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121a:	69a3      	ldr	r3, [r4, #24]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d045      	beq.n	80012ac <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8001220:	4b55      	ldr	r3, [pc, #340]	; (8001378 <HAL_RCC_OscConfig+0x2c8>)
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001226:	f7ff fcbd 	bl	8000ba4 <HAL_GetTick>
 800122a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122c:	4b50      	ldr	r3, [pc, #320]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	f013 0f02 	tst.w	r3, #2
 8001234:	d121      	bne.n	800127a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001236:	f7ff fcb5 	bl	8000ba4 <HAL_GetTick>
 800123a:	1b40      	subs	r0, r0, r5
 800123c:	2802      	cmp	r0, #2
 800123e:	d9f5      	bls.n	800122c <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 8001240:	2003      	movs	r0, #3
 8001242:	e130      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001244:	4a4a      	ldr	r2, [pc, #296]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 8001246:	6813      	ldr	r3, [r2, #0]
 8001248:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800124c:	6961      	ldr	r1, [r4, #20]
 800124e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e7dd      	b.n	8001212 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <HAL_RCC_OscConfig+0x2c4>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800125c:	f7ff fca2 	bl	8000ba4 <HAL_GetTick>
 8001260:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	4b43      	ldr	r3, [pc, #268]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f013 0f02 	tst.w	r3, #2
 800126a:	d0d2      	beq.n	8001212 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126c:	f7ff fc9a 	bl	8000ba4 <HAL_GetTick>
 8001270:	1b40      	subs	r0, r0, r5
 8001272:	2802      	cmp	r0, #2
 8001274:	d9f5      	bls.n	8001262 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8001276:	2003      	movs	r0, #3
 8001278:	e115      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f7ff ff02 	bl	8001084 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	f013 0f04 	tst.w	r3, #4
 8001286:	f000 8097 	beq.w	80013b8 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128a:	4b39      	ldr	r3, [pc, #228]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001292:	d11d      	bne.n	80012d0 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	4b36      	ldr	r3, [pc, #216]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 8001296:	69da      	ldr	r2, [r3, #28]
 8001298:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800129c:	61da      	str	r2, [r3, #28]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012a8:	2501      	movs	r5, #1
 80012aa:	e012      	b.n	80012d2 <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 80012ac:	4b32      	ldr	r3, [pc, #200]	; (8001378 <HAL_RCC_OscConfig+0x2c8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012b2:	f7ff fc77 	bl	8000ba4 <HAL_GetTick>
 80012b6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	f013 0f02 	tst.w	r3, #2
 80012c0:	d0de      	beq.n	8001280 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c2:	f7ff fc6f 	bl	8000ba4 <HAL_GetTick>
 80012c6:	1b40      	subs	r0, r0, r5
 80012c8:	2802      	cmp	r0, #2
 80012ca:	d9f5      	bls.n	80012b8 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 80012cc:	2003      	movs	r0, #3
 80012ce:	e0ea      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80012d0:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <HAL_RCC_OscConfig+0x2cc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012da:	d011      	beq.n	8001300 <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012dc:	68e3      	ldr	r3, [r4, #12]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d022      	beq.n	8001328 <HAL_RCC_OscConfig+0x278>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d138      	bne.n	8001358 <HAL_RCC_OscConfig+0x2a8>
 80012e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012ea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80012ee:	6a1a      	ldr	r2, [r3, #32]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	621a      	str	r2, [r3, #32]
 80012f6:	6a1a      	ldr	r2, [r3, #32]
 80012f8:	f022 0204 	bic.w	r2, r2, #4
 80012fc:	621a      	str	r2, [r3, #32]
 80012fe:	e018      	b.n	8001332 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001300:	4a1e      	ldr	r2, [pc, #120]	; (800137c <HAL_RCC_OscConfig+0x2cc>)
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001308:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800130a:	f7ff fc4b 	bl	8000ba4 <HAL_GetTick>
 800130e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <HAL_RCC_OscConfig+0x2cc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001318:	d1e0      	bne.n	80012dc <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800131a:	f7ff fc43 	bl	8000ba4 <HAL_GetTick>
 800131e:	1b80      	subs	r0, r0, r6
 8001320:	2864      	cmp	r0, #100	; 0x64
 8001322:	d9f5      	bls.n	8001310 <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8001324:	2003      	movs	r0, #3
 8001326:	e0be      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 800132a:	6a13      	ldr	r3, [r2, #32]
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001332:	68e3      	ldr	r3, [r4, #12]
 8001334:	b373      	cbz	r3, 8001394 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8001336:	f7ff fc35 	bl	8000ba4 <HAL_GetTick>
 800133a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f013 0f02 	tst.w	r3, #2
 8001344:	d137      	bne.n	80013b6 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7ff fc2d 	bl	8000ba4 <HAL_GetTick>
 800134a:	1b80      	subs	r0, r0, r6
 800134c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001350:	4298      	cmp	r0, r3
 8001352:	d9f3      	bls.n	800133c <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8001354:	2003      	movs	r0, #3
 8001356:	e0a6      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001358:	2b05      	cmp	r3, #5
 800135a:	d011      	beq.n	8001380 <HAL_RCC_OscConfig+0x2d0>
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <HAL_RCC_OscConfig+0x2c0>)
 800135e:	6a1a      	ldr	r2, [r3, #32]
 8001360:	f022 0201 	bic.w	r2, r2, #1
 8001364:	621a      	str	r2, [r3, #32]
 8001366:	6a1a      	ldr	r2, [r3, #32]
 8001368:	f022 0204 	bic.w	r2, r2, #4
 800136c:	621a      	str	r2, [r3, #32]
 800136e:	e7e0      	b.n	8001332 <HAL_RCC_OscConfig+0x282>
 8001370:	40021000 	.word	0x40021000
 8001374:	42420000 	.word	0x42420000
 8001378:	42420480 	.word	0x42420480
 800137c:	40007000 	.word	0x40007000
 8001380:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <HAL_RCC_OscConfig+0x408>)
 8001382:	6a1a      	ldr	r2, [r3, #32]
 8001384:	f042 0204 	orr.w	r2, r2, #4
 8001388:	621a      	str	r2, [r3, #32]
 800138a:	6a1a      	ldr	r2, [r3, #32]
 800138c:	f042 0201 	orr.w	r2, r2, #1
 8001390:	621a      	str	r2, [r3, #32]
 8001392:	e7ce      	b.n	8001332 <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8001394:	f7ff fc06 	bl	8000ba4 <HAL_GetTick>
 8001398:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139a:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <HAL_RCC_OscConfig+0x408>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	f013 0f02 	tst.w	r3, #2
 80013a2:	d008      	beq.n	80013b6 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff fbfe 	bl	8000ba4 <HAL_GetTick>
 80013a8:	1b80      	subs	r0, r0, r6
 80013aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80013ae:	4298      	cmp	r0, r3
 80013b0:	d9f3      	bls.n	800139a <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80013b2:	2003      	movs	r0, #3
 80013b4:	e077      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 80013b6:	b9e5      	cbnz	r5, 80013f2 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b8:	69e3      	ldr	r3, [r4, #28]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d072      	beq.n	80014a4 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013be:	4a3e      	ldr	r2, [pc, #248]	; (80014b8 <HAL_RCC_OscConfig+0x408>)
 80013c0:	6852      	ldr	r2, [r2, #4]
 80013c2:	f002 020c 	and.w	r2, r2, #12
 80013c6:	2a08      	cmp	r2, #8
 80013c8:	d056      	beq.n	8001478 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d017      	beq.n	80013fe <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <HAL_RCC_OscConfig+0x40c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013d4:	f7ff fbe6 	bl	8000ba4 <HAL_GetTick>
 80013d8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013da:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <HAL_RCC_OscConfig+0x408>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013e2:	d047      	beq.n	8001474 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff fbde 	bl	8000ba4 <HAL_GetTick>
 80013e8:	1b00      	subs	r0, r0, r4
 80013ea:	2802      	cmp	r0, #2
 80013ec:	d9f5      	bls.n	80013da <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80013ee:	2003      	movs	r0, #3
 80013f0:	e059      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f2:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <HAL_RCC_OscConfig+0x408>)
 80013f4:	69d3      	ldr	r3, [r2, #28]
 80013f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013fa:	61d3      	str	r3, [r2, #28]
 80013fc:	e7dc      	b.n	80013b8 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80013fe:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <HAL_RCC_OscConfig+0x40c>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001404:	f7ff fbce 	bl	8000ba4 <HAL_GetTick>
 8001408:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_RCC_OscConfig+0x408>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001412:	d006      	beq.n	8001422 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fbc6 	bl	8000ba4 <HAL_GetTick>
 8001418:	1b40      	subs	r0, r0, r5
 800141a:	2802      	cmp	r0, #2
 800141c:	d9f5      	bls.n	800140a <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800141e:	2003      	movs	r0, #3
 8001420:	e041      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001422:	6a23      	ldr	r3, [r4, #32]
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001428:	d01a      	beq.n	8001460 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800142a:	4923      	ldr	r1, [pc, #140]	; (80014b8 <HAL_RCC_OscConfig+0x408>)
 800142c:	684b      	ldr	r3, [r1, #4]
 800142e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001432:	6a22      	ldr	r2, [r4, #32]
 8001434:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001436:	4302      	orrs	r2, r0
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <HAL_RCC_OscConfig+0x40c>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001442:	f7ff fbaf 	bl	8000ba4 <HAL_GetTick>
 8001446:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_RCC_OscConfig+0x408>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001450:	d10e      	bne.n	8001470 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001452:	f7ff fba7 	bl	8000ba4 <HAL_GetTick>
 8001456:	1b00      	subs	r0, r0, r4
 8001458:	2802      	cmp	r0, #2
 800145a:	d9f5      	bls.n	8001448 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 800145c:	2003      	movs	r0, #3
 800145e:	e022      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001460:	4a15      	ldr	r2, [pc, #84]	; (80014b8 <HAL_RCC_OscConfig+0x408>)
 8001462:	6853      	ldr	r3, [r2, #4]
 8001464:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001468:	68a1      	ldr	r1, [r4, #8]
 800146a:	430b      	orrs	r3, r1
 800146c:	6053      	str	r3, [r2, #4]
 800146e:	e7dc      	b.n	800142a <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8001470:	2000      	movs	r0, #0
 8001472:	e018      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
 8001474:	2000      	movs	r0, #0
 8001476:	e016      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001478:	2b01      	cmp	r3, #1
 800147a:	d016      	beq.n	80014aa <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_RCC_OscConfig+0x408>)
 800147e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001480:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001484:	6a22      	ldr	r2, [r4, #32]
 8001486:	4291      	cmp	r1, r2
 8001488:	d111      	bne.n	80014ae <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800148a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800148e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001490:	4293      	cmp	r3, r2
 8001492:	d10e      	bne.n	80014b2 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8001494:	2000      	movs	r0, #0
 8001496:	e006      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8001498:	2001      	movs	r0, #1
}
 800149a:	4770      	bx	lr
        return HAL_ERROR;
 800149c:	2001      	movs	r0, #1
 800149e:	e002      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80014a0:	2001      	movs	r0, #1
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80014a4:	2000      	movs	r0, #0
}
 80014a6:	b002      	add	sp, #8
 80014a8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80014aa:	2001      	movs	r0, #1
 80014ac:	e7fb      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80014ae:	2001      	movs	r0, #1
 80014b0:	e7f9      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
 80014b2:	2001      	movs	r0, #1
 80014b4:	e7f7      	b.n	80014a6 <HAL_RCC_OscConfig+0x3f6>
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	42420060 	.word	0x42420060

080014c0 <HAL_RCC_GetSysClockFreq>:
{
 80014c0:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_RCC_GetSysClockFreq+0x5c>)
 80014c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c6:	f10d 0c18 	add.w	ip, sp, #24
 80014ca:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014ce:	f240 2301 	movw	r3, #513	; 0x201
 80014d2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_RCC_GetSysClockFreq+0x60>)
 80014d8:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80014da:	f003 020c 	and.w	r2, r3, #12
 80014de:	2a08      	cmp	r2, #8
 80014e0:	d002      	beq.n	80014e8 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80014e4:	b006      	add	sp, #24
 80014e6:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014e8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80014ec:	4462      	add	r2, ip
 80014ee:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80014f6:	d00c      	beq.n	8001512 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_RCC_GetSysClockFreq+0x60>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001500:	4463      	add	r3, ip
 8001502:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001506:	4807      	ldr	r0, [pc, #28]	; (8001524 <HAL_RCC_GetSysClockFreq+0x64>)
 8001508:	fb00 f002 	mul.w	r0, r0, r2
 800150c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001510:	e7e8      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <HAL_RCC_GetSysClockFreq+0x68>)
 8001514:	fb00 f002 	mul.w	r0, r0, r2
 8001518:	e7e4      	b.n	80014e4 <HAL_RCC_GetSysClockFreq+0x24>
 800151a:	bf00      	nop
 800151c:	08001f04 	.word	0x08001f04
 8001520:	40021000 	.word	0x40021000
 8001524:	007a1200 	.word	0x007a1200
 8001528:	003d0900 	.word	0x003d0900

0800152c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800152c:	2800      	cmp	r0, #0
 800152e:	f000 80a0 	beq.w	8001672 <HAL_RCC_ClockConfig+0x146>
{
 8001532:	b570      	push	{r4, r5, r6, lr}
 8001534:	460d      	mov	r5, r1
 8001536:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001538:	4b52      	ldr	r3, [pc, #328]	; (8001684 <HAL_RCC_ClockConfig+0x158>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	428b      	cmp	r3, r1
 8001542:	d20b      	bcs.n	800155c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001544:	4a4f      	ldr	r2, [pc, #316]	; (8001684 <HAL_RCC_ClockConfig+0x158>)
 8001546:	6813      	ldr	r3, [r2, #0]
 8001548:	f023 0307 	bic.w	r3, r3, #7
 800154c:	430b      	orrs	r3, r1
 800154e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001550:	6813      	ldr	r3, [r2, #0]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	428b      	cmp	r3, r1
 8001558:	f040 808d 	bne.w	8001676 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	f013 0f02 	tst.w	r3, #2
 8001562:	d017      	beq.n	8001594 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	f013 0f04 	tst.w	r3, #4
 8001568:	d004      	beq.n	8001574 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800156a:	4a47      	ldr	r2, [pc, #284]	; (8001688 <HAL_RCC_ClockConfig+0x15c>)
 800156c:	6853      	ldr	r3, [r2, #4]
 800156e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001572:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	f013 0f08 	tst.w	r3, #8
 800157a:	d004      	beq.n	8001586 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800157c:	4a42      	ldr	r2, [pc, #264]	; (8001688 <HAL_RCC_ClockConfig+0x15c>)
 800157e:	6853      	ldr	r3, [r2, #4]
 8001580:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001584:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001586:	4a40      	ldr	r2, [pc, #256]	; (8001688 <HAL_RCC_ClockConfig+0x15c>)
 8001588:	6853      	ldr	r3, [r2, #4]
 800158a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800158e:	68a1      	ldr	r1, [r4, #8]
 8001590:	430b      	orrs	r3, r1
 8001592:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	f013 0f01 	tst.w	r3, #1
 800159a:	d031      	beq.n	8001600 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159c:	6863      	ldr	r3, [r4, #4]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d020      	beq.n	80015e4 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d025      	beq.n	80015f2 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a6:	4a38      	ldr	r2, [pc, #224]	; (8001688 <HAL_RCC_ClockConfig+0x15c>)
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	f012 0f02 	tst.w	r2, #2
 80015ae:	d064      	beq.n	800167a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b0:	4935      	ldr	r1, [pc, #212]	; (8001688 <HAL_RCC_ClockConfig+0x15c>)
 80015b2:	684a      	ldr	r2, [r1, #4]
 80015b4:	f022 0203 	bic.w	r2, r2, #3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80015bc:	f7ff faf2 	bl	8000ba4 <HAL_GetTick>
 80015c0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c2:	4b31      	ldr	r3, [pc, #196]	; (8001688 <HAL_RCC_ClockConfig+0x15c>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	6862      	ldr	r2, [r4, #4]
 80015cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015d0:	d016      	beq.n	8001600 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d2:	f7ff fae7 	bl	8000ba4 <HAL_GetTick>
 80015d6:	1b80      	subs	r0, r0, r6
 80015d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80015dc:	4298      	cmp	r0, r3
 80015de:	d9f0      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80015e0:	2003      	movs	r0, #3
 80015e2:	e045      	b.n	8001670 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e4:	4a28      	ldr	r2, [pc, #160]	; (8001688 <HAL_RCC_ClockConfig+0x15c>)
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80015ec:	d1e0      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
 80015f0:	e03e      	b.n	8001670 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f2:	4a25      	ldr	r2, [pc, #148]	; (8001688 <HAL_RCC_ClockConfig+0x15c>)
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80015fa:	d1d9      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80015fc:	2001      	movs	r0, #1
 80015fe:	e037      	b.n	8001670 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001600:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_RCC_ClockConfig+0x158>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	42ab      	cmp	r3, r5
 800160a:	d90a      	bls.n	8001622 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160c:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <HAL_RCC_ClockConfig+0x158>)
 800160e:	6813      	ldr	r3, [r2, #0]
 8001610:	f023 0307 	bic.w	r3, r3, #7
 8001614:	432b      	orrs	r3, r5
 8001616:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001618:	6813      	ldr	r3, [r2, #0]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	42ab      	cmp	r3, r5
 8001620:	d12d      	bne.n	800167e <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	f013 0f04 	tst.w	r3, #4
 8001628:	d006      	beq.n	8001638 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_RCC_ClockConfig+0x15c>)
 800162c:	6853      	ldr	r3, [r2, #4]
 800162e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001632:	68e1      	ldr	r1, [r4, #12]
 8001634:	430b      	orrs	r3, r1
 8001636:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	f013 0f08 	tst.w	r3, #8
 800163e:	d007      	beq.n	8001650 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001640:	4a11      	ldr	r2, [pc, #68]	; (8001688 <HAL_RCC_ClockConfig+0x15c>)
 8001642:	6853      	ldr	r3, [r2, #4]
 8001644:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001648:	6921      	ldr	r1, [r4, #16]
 800164a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800164e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001650:	f7ff ff36 	bl	80014c0 <HAL_RCC_GetSysClockFreq>
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_RCC_ClockConfig+0x15c>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800165c:	4a0b      	ldr	r2, [pc, #44]	; (800168c <HAL_RCC_ClockConfig+0x160>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	40d8      	lsrs	r0, r3
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_RCC_ClockConfig+0x164>)
 8001664:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_RCC_ClockConfig+0x168>)
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	f7ff fa59 	bl	8000b20 <HAL_InitTick>
  return HAL_OK;
 800166e:	2000      	movs	r0, #0
}
 8001670:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001672:	2001      	movs	r0, #1
}
 8001674:	4770      	bx	lr
    return HAL_ERROR;
 8001676:	2001      	movs	r0, #1
 8001678:	e7fa      	b.n	8001670 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800167a:	2001      	movs	r0, #1
 800167c:	e7f8      	b.n	8001670 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800167e:	2001      	movs	r0, #1
 8001680:	e7f6      	b.n	8001670 <HAL_RCC_ClockConfig+0x144>
 8001682:	bf00      	nop
 8001684:	40022000 	.word	0x40022000
 8001688:	40021000 	.word	0x40021000
 800168c:	08001eec 	.word	0x08001eec
 8001690:	20000000 	.word	0x20000000
 8001694:	20000008 	.word	0x20000008

08001698 <HAL_RCC_GetHCLKFreq>:
}
 8001698:	4b01      	ldr	r3, [pc, #4]	; (80016a0 <HAL_RCC_GetHCLKFreq+0x8>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000000 	.word	0x20000000

080016a4 <HAL_RCC_GetPCLK1Freq>:
{
 80016a4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016a6:	f7ff fff7 	bl	8001698 <HAL_RCC_GetHCLKFreq>
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80016b2:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016b4:	5cd3      	ldrb	r3, [r2, r3]
}
 80016b6:	40d8      	lsrs	r0, r3
 80016b8:	bd08      	pop	{r3, pc}
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000
 80016c0:	08001efc 	.word	0x08001efc

080016c4 <HAL_RCC_GetPCLK2Freq>:
{
 80016c4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016c6:	f7ff ffe7 	bl	8001698 <HAL_RCC_GetHCLKFreq>
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80016d2:	4a03      	ldr	r2, [pc, #12]	; (80016e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016d4:	5cd3      	ldrb	r3, [r2, r3]
}
 80016d6:	40d8      	lsrs	r0, r3
 80016d8:	bd08      	pop	{r3, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	08001efc 	.word	0x08001efc

080016e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80016e4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016e6:	6a03      	ldr	r3, [r0, #32]
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016ee:	6a05      	ldr	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016f0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80016f2:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80016f4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016f8:	680b      	ldr	r3, [r1, #0]
 80016fa:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80016fc:	f025 0502 	bic.w	r5, r5, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001700:	688b      	ldr	r3, [r1, #8]
 8001702:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001704:	4d10      	ldr	r5, [pc, #64]	; (8001748 <TIM_OC1_SetConfig+0x64>)
 8001706:	42a8      	cmp	r0, r5
 8001708:	d003      	beq.n	8001712 <TIM_OC1_SetConfig+0x2e>
 800170a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800170e:	42a8      	cmp	r0, r5
 8001710:	d105      	bne.n	800171e <TIM_OC1_SetConfig+0x3a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001712:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001716:	68cd      	ldr	r5, [r1, #12]
 8001718:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800171a:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800171e:	4d0a      	ldr	r5, [pc, #40]	; (8001748 <TIM_OC1_SetConfig+0x64>)
 8001720:	42a8      	cmp	r0, r5
 8001722:	d003      	beq.n	800172c <TIM_OC1_SetConfig+0x48>
 8001724:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001728:	42a8      	cmp	r0, r5
 800172a:	d105      	bne.n	8001738 <TIM_OC1_SetConfig+0x54>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800172c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001730:	694d      	ldr	r5, [r1, #20]
 8001732:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001734:	698a      	ldr	r2, [r1, #24]
 8001736:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001738:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800173a:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800173c:	684a      	ldr	r2, [r1, #4]
 800173e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001740:	6203      	str	r3, [r0, #32]
}
 8001742:	bc30      	pop	{r4, r5}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40012c00 	.word	0x40012c00

0800174c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800174c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800174e:	6a03      	ldr	r3, [r0, #32]
 8001750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001754:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001756:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001758:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800175a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800175c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001760:	680d      	ldr	r5, [r1, #0]
 8001762:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001768:	688d      	ldr	r5, [r1, #8]
 800176a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800176e:	4d12      	ldr	r5, [pc, #72]	; (80017b8 <TIM_OC3_SetConfig+0x6c>)
 8001770:	42a8      	cmp	r0, r5
 8001772:	d003      	beq.n	800177c <TIM_OC3_SetConfig+0x30>
 8001774:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001778:	42a8      	cmp	r0, r5
 800177a:	d106      	bne.n	800178a <TIM_OC3_SetConfig+0x3e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800177c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001780:	68cd      	ldr	r5, [r1, #12]
 8001782:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001786:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800178a:	4d0b      	ldr	r5, [pc, #44]	; (80017b8 <TIM_OC3_SetConfig+0x6c>)
 800178c:	42a8      	cmp	r0, r5
 800178e:	d003      	beq.n	8001798 <TIM_OC3_SetConfig+0x4c>
 8001790:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001794:	42a8      	cmp	r0, r5
 8001796:	d107      	bne.n	80017a8 <TIM_OC3_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001798:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800179c:	694d      	ldr	r5, [r1, #20]
 800179e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80017a2:	698d      	ldr	r5, [r1, #24]
 80017a4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017a8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80017aa:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80017ac:	684a      	ldr	r2, [r1, #4]
 80017ae:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017b0:	6203      	str	r3, [r0, #32]
}
 80017b2:	bc30      	pop	{r4, r5}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40012c00 	.word	0x40012c00

080017bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017bc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80017be:	6a03      	ldr	r3, [r0, #32]
 80017c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017c6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017ca:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80017cc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80017d0:	680d      	ldr	r5, [r1, #0]
 80017d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80017d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80017da:	688d      	ldr	r5, [r1, #8]
 80017dc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80017e0:	4d09      	ldr	r5, [pc, #36]	; (8001808 <TIM_OC4_SetConfig+0x4c>)
 80017e2:	42a8      	cmp	r0, r5
 80017e4:	d003      	beq.n	80017ee <TIM_OC4_SetConfig+0x32>
 80017e6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80017ea:	42a8      	cmp	r0, r5
 80017ec:	d104      	bne.n	80017f8 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80017ee:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80017f2:	694d      	ldr	r5, [r1, #20]
 80017f4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017f8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80017fa:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80017fc:	684a      	ldr	r2, [r1, #4]
 80017fe:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001800:	6203      	str	r3, [r0, #32]
}
 8001802:	bc30      	pop	{r4, r5}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40012c00 	.word	0x40012c00

0800180c <HAL_TIM_PeriodElapsedCallback>:
}
 800180c:	4770      	bx	lr

0800180e <HAL_TIM_OC_DelayElapsedCallback>:
}
 800180e:	4770      	bx	lr

08001810 <HAL_TIM_IC_CaptureCallback>:
}
 8001810:	4770      	bx	lr

08001812 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001812:	4770      	bx	lr

08001814 <HAL_TIM_TriggerCallback>:
}
 8001814:	4770      	bx	lr

08001816 <HAL_TIM_IRQHandler>:
{
 8001816:	b510      	push	{r4, lr}
 8001818:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800181a:	6803      	ldr	r3, [r0, #0]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	f012 0f02 	tst.w	r2, #2
 8001822:	d011      	beq.n	8001848 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	f012 0f02 	tst.w	r2, #2
 800182a:	d00d      	beq.n	8001848 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800182c:	f06f 0202 	mvn.w	r2, #2
 8001830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001832:	2301      	movs	r3, #1
 8001834:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001836:	6803      	ldr	r3, [r0, #0]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f013 0f03 	tst.w	r3, #3
 800183e:	d070      	beq.n	8001922 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001840:	f7ff ffe6 	bl	8001810 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001844:	2300      	movs	r3, #0
 8001846:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	f012 0f04 	tst.w	r2, #4
 8001850:	d012      	beq.n	8001878 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	f012 0f04 	tst.w	r2, #4
 8001858:	d00e      	beq.n	8001878 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800185a:	f06f 0204 	mvn.w	r2, #4
 800185e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001860:	2302      	movs	r3, #2
 8001862:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f413 7f40 	tst.w	r3, #768	; 0x300
 800186c:	d05f      	beq.n	800192e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff ffce 	bl	8001810 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001874:	2300      	movs	r3, #0
 8001876:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	f012 0f08 	tst.w	r2, #8
 8001880:	d012      	beq.n	80018a8 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	f012 0f08 	tst.w	r2, #8
 8001888:	d00e      	beq.n	80018a8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800188a:	f06f 0208 	mvn.w	r2, #8
 800188e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001890:	2304      	movs	r3, #4
 8001892:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	f013 0f03 	tst.w	r3, #3
 800189c:	d04e      	beq.n	800193c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800189e:	4620      	mov	r0, r4
 80018a0:	f7ff ffb6 	bl	8001810 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a4:	2300      	movs	r3, #0
 80018a6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	f012 0f10 	tst.w	r2, #16
 80018b0:	d012      	beq.n	80018d8 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	f012 0f10 	tst.w	r2, #16
 80018b8:	d00e      	beq.n	80018d8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018ba:	f06f 0210 	mvn.w	r2, #16
 80018be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018c0:	2308      	movs	r3, #8
 80018c2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80018cc:	d03d      	beq.n	800194a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80018ce:	4620      	mov	r0, r4
 80018d0:	f7ff ff9e 	bl	8001810 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d4:	2300      	movs	r3, #0
 80018d6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	f012 0f01 	tst.w	r2, #1
 80018e0:	d003      	beq.n	80018ea <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	f012 0f01 	tst.w	r2, #1
 80018e8:	d136      	bne.n	8001958 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018ea:	6823      	ldr	r3, [r4, #0]
 80018ec:	691a      	ldr	r2, [r3, #16]
 80018ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 80018f2:	d003      	beq.n	80018fc <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80018fa:	d134      	bne.n	8001966 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001904:	d003      	beq.n	800190e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	f012 0f40 	tst.w	r2, #64	; 0x40
 800190c:	d132      	bne.n	8001974 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	f012 0f20 	tst.w	r2, #32
 8001916:	d003      	beq.n	8001920 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	f012 0f20 	tst.w	r2, #32
 800191e:	d130      	bne.n	8001982 <HAL_TIM_IRQHandler+0x16c>
}
 8001920:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001922:	f7ff ff74 	bl	800180e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001926:	4620      	mov	r0, r4
 8001928:	f7ff ff73 	bl	8001812 <HAL_TIM_PWM_PulseFinishedCallback>
 800192c:	e78a      	b.n	8001844 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800192e:	4620      	mov	r0, r4
 8001930:	f7ff ff6d 	bl	800180e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001934:	4620      	mov	r0, r4
 8001936:	f7ff ff6c 	bl	8001812 <HAL_TIM_PWM_PulseFinishedCallback>
 800193a:	e79b      	b.n	8001874 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800193c:	4620      	mov	r0, r4
 800193e:	f7ff ff66 	bl	800180e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001942:	4620      	mov	r0, r4
 8001944:	f7ff ff65 	bl	8001812 <HAL_TIM_PWM_PulseFinishedCallback>
 8001948:	e7ac      	b.n	80018a4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800194a:	4620      	mov	r0, r4
 800194c:	f7ff ff5f 	bl	800180e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001950:	4620      	mov	r0, r4
 8001952:	f7ff ff5e 	bl	8001812 <HAL_TIM_PWM_PulseFinishedCallback>
 8001956:	e7bd      	b.n	80018d4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001958:	f06f 0201 	mvn.w	r2, #1
 800195c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff ff54 	bl	800180c <HAL_TIM_PeriodElapsedCallback>
 8001964:	e7c1      	b.n	80018ea <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001966:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800196a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800196c:	4620      	mov	r0, r4
 800196e:	f000 f9e5 	bl	8001d3c <HAL_TIMEx_BreakCallback>
 8001972:	e7c3      	b.n	80018fc <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001974:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001978:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800197a:	4620      	mov	r0, r4
 800197c:	f7ff ff4a 	bl	8001814 <HAL_TIM_TriggerCallback>
 8001980:	e7c5      	b.n	800190e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001982:	f06f 0220 	mvn.w	r2, #32
 8001986:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001988:	4620      	mov	r0, r4
 800198a:	f000 f9d6 	bl	8001d3a <HAL_TIMEx_CommutCallback>
}
 800198e:	e7c7      	b.n	8001920 <HAL_TIM_IRQHandler+0x10a>

08001990 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001990:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001992:	4a24      	ldr	r2, [pc, #144]	; (8001a24 <TIM_Base_SetConfig+0x94>)
 8001994:	4290      	cmp	r0, r2
 8001996:	d012      	beq.n	80019be <TIM_Base_SetConfig+0x2e>
 8001998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800199c:	4290      	cmp	r0, r2
 800199e:	d00e      	beq.n	80019be <TIM_Base_SetConfig+0x2e>
 80019a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80019a4:	d00b      	beq.n	80019be <TIM_Base_SetConfig+0x2e>
 80019a6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80019aa:	4290      	cmp	r0, r2
 80019ac:	d007      	beq.n	80019be <TIM_Base_SetConfig+0x2e>
 80019ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019b2:	4290      	cmp	r0, r2
 80019b4:	d003      	beq.n	80019be <TIM_Base_SetConfig+0x2e>
 80019b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ba:	4290      	cmp	r0, r2
 80019bc:	d103      	bne.n	80019c6 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80019c2:	684a      	ldr	r2, [r1, #4]
 80019c4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <TIM_Base_SetConfig+0x94>)
 80019c8:	4290      	cmp	r0, r2
 80019ca:	d012      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019d0:	4290      	cmp	r0, r2
 80019d2:	d00e      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80019d8:	d00b      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019da:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80019de:	4290      	cmp	r0, r2
 80019e0:	d007      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019e6:	4290      	cmp	r0, r2
 80019e8:	d003      	beq.n	80019f2 <TIM_Base_SetConfig+0x62>
 80019ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ee:	4290      	cmp	r0, r2
 80019f0:	d103      	bne.n	80019fa <TIM_Base_SetConfig+0x6a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80019f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019f6:	68ca      	ldr	r2, [r1, #12]
 80019f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019fe:	694a      	ldr	r2, [r1, #20]
 8001a00:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001a02:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a04:	688b      	ldr	r3, [r1, #8]
 8001a06:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001a08:	680b      	ldr	r3, [r1, #0]
 8001a0a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <TIM_Base_SetConfig+0x94>)
 8001a0e:	4298      	cmp	r0, r3
 8001a10:	d003      	beq.n	8001a1a <TIM_Base_SetConfig+0x8a>
 8001a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a16:	4298      	cmp	r0, r3
 8001a18:	d101      	bne.n	8001a1e <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 8001a1a:	690b      	ldr	r3, [r1, #16]
 8001a1c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	6143      	str	r3, [r0, #20]
}
 8001a22:	4770      	bx	lr
 8001a24:	40012c00 	.word	0x40012c00

08001a28 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001a28:	b340      	cbz	r0, 8001a7c <HAL_TIM_PWM_Init+0x54>
{
 8001a2a:	b510      	push	{r4, lr}
 8001a2c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001a2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a32:	b1f3      	cbz	r3, 8001a72 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a34:	2302      	movs	r3, #2
 8001a36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	f851 0b04 	ldr.w	r0, [r1], #4
 8001a40:	f7ff ffa6 	bl	8001990 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001a4e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001a52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001a56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001a6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a6e:	2000      	movs	r0, #0
}
 8001a70:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001a72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001a76:	f7fe fdc5 	bl	8000604 <HAL_TIM_PWM_MspInit>
 8001a7a:	e7db      	b.n	8001a34 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8001a7c:	2001      	movs	r0, #1
}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8001a80:	2800      	cmp	r0, #0
 8001a82:	d053      	beq.n	8001b2c <HAL_TIM_Encoder_Init+0xac>
{
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	460d      	mov	r5, r1
 8001a88:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d047      	beq.n	8001b22 <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a92:	2302      	movs	r3, #2
 8001a94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001a98:	6822      	ldr	r2, [r4, #0]
 8001a9a:	6893      	ldr	r3, [r2, #8]
 8001a9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aa0:	f023 0307 	bic.w	r3, r3, #7
 8001aa4:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	f851 0b04 	ldr.w	r0, [r1], #4
 8001aac:	f7ff ff70 	bl	8001990 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8001ab0:	6821      	ldr	r1, [r4, #0]
 8001ab2:	688a      	ldr	r2, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8001ab4:	698e      	ldr	r6, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8001ab6:	6a0f      	ldr	r7, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8001ab8:	6828      	ldr	r0, [r5, #0]
 8001aba:	4310      	orrs	r0, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001abc:	f426 7640 	bic.w	r6, r6, #768	; 0x300
 8001ac0:	f026 0603 	bic.w	r6, r6, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ac4:	68aa      	ldr	r2, [r5, #8]
 8001ac6:	69ab      	ldr	r3, [r5, #24]
 8001ac8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001acc:	4333      	orrs	r3, r6
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001ace:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8001ad2:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001ad6:	68ee      	ldr	r6, [r5, #12]
 8001ad8:	69ea      	ldr	r2, [r5, #28]
 8001ada:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8001ade:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ae0:	6a2a      	ldr	r2, [r5, #32]
 8001ae2:	0313      	lsls	r3, r2, #12
 8001ae4:	692a      	ldr	r2, [r5, #16]
 8001ae6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001aea:	4333      	orrs	r3, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001aec:	f027 0722 	bic.w	r7, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001af0:	686a      	ldr	r2, [r5, #4]
 8001af2:	696d      	ldr	r5, [r5, #20]
 8001af4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001af8:	433a      	orrs	r2, r7
  htim->Instance->SMCR = tmpsmcr;
 8001afa:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8001afc:	6821      	ldr	r1, [r4, #0]
 8001afe:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b04:	2301      	movs	r3, #1
 8001b06:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001b0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001b0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001b12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001b16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8001b1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001b1e:	2000      	movs	r0, #0
}
 8001b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8001b22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8001b26:	f7fe fd93 	bl	8000650 <HAL_TIM_Encoder_MspInit>
 8001b2a:	e7b2      	b.n	8001a92 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8001b2c:	2001      	movs	r0, #1
}
 8001b2e:	4770      	bx	lr

08001b30 <TIM_OC2_SetConfig>:
{
 8001b30:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b32:	6a03      	ldr	r3, [r0, #32]
 8001b34:	f023 0310 	bic.w	r3, r3, #16
 8001b38:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001b3a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001b3c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001b3e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b40:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b44:	680d      	ldr	r5, [r1, #0]
 8001b46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8001b4a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b4e:	688d      	ldr	r5, [r1, #8]
 8001b50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b54:	4d11      	ldr	r5, [pc, #68]	; (8001b9c <TIM_OC2_SetConfig+0x6c>)
 8001b56:	42a8      	cmp	r0, r5
 8001b58:	d003      	beq.n	8001b62 <TIM_OC2_SetConfig+0x32>
 8001b5a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b5e:	42a8      	cmp	r0, r5
 8001b60:	d106      	bne.n	8001b70 <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b66:	68cd      	ldr	r5, [r1, #12]
 8001b68:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b70:	4d0a      	ldr	r5, [pc, #40]	; (8001b9c <TIM_OC2_SetConfig+0x6c>)
 8001b72:	42a8      	cmp	r0, r5
 8001b74:	d003      	beq.n	8001b7e <TIM_OC2_SetConfig+0x4e>
 8001b76:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b7a:	42a8      	cmp	r0, r5
 8001b7c:	d107      	bne.n	8001b8e <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b7e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b82:	694d      	ldr	r5, [r1, #20]
 8001b84:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b88:	698d      	ldr	r5, [r1, #24]
 8001b8a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001b8e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001b90:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001b92:	684a      	ldr	r2, [r1, #4]
 8001b94:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001b96:	6203      	str	r3, [r0, #32]
}
 8001b98:	bc30      	pop	{r4, r5}
 8001b9a:	4770      	bx	lr
 8001b9c:	40012c00 	.word	0x40012c00

08001ba0 <HAL_TIM_PWM_ConfigChannel>:
{
 8001ba0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001ba2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d060      	beq.n	8001c6c <HAL_TIM_PWM_ConfigChannel+0xcc>
 8001baa:	4604      	mov	r4, r0
 8001bac:	460d      	mov	r5, r1
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8001bb4:	2a0c      	cmp	r2, #12
 8001bb6:	d81a      	bhi.n	8001bee <HAL_TIM_PWM_ConfigChannel+0x4e>
 8001bb8:	e8df f002 	tbb	[pc, r2]
 8001bbc:	19191907 	.word	0x19191907
 8001bc0:	1919191d 	.word	0x1919191d
 8001bc4:	19191931 	.word	0x19191931
 8001bc8:	44          	.byte	0x44
 8001bc9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bca:	6800      	ldr	r0, [r0, #0]
 8001bcc:	f7ff fd8a 	bl	80016e4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bd0:	6822      	ldr	r2, [r4, #0]
 8001bd2:	6993      	ldr	r3, [r2, #24]
 8001bd4:	f043 0308 	orr.w	r3, r3, #8
 8001bd8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bda:	6822      	ldr	r2, [r4, #0]
 8001bdc:	6993      	ldr	r3, [r2, #24]
 8001bde:	f023 0304 	bic.w	r3, r3, #4
 8001be2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001be4:	6822      	ldr	r2, [r4, #0]
 8001be6:	6993      	ldr	r3, [r2, #24]
 8001be8:	6929      	ldr	r1, [r5, #16]
 8001bea:	430b      	orrs	r3, r1
 8001bec:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001bf4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bf6:	6800      	ldr	r0, [r0, #0]
 8001bf8:	f7ff ff9a 	bl	8001b30 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bfc:	6822      	ldr	r2, [r4, #0]
 8001bfe:	6993      	ldr	r3, [r2, #24]
 8001c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c04:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c06:	6822      	ldr	r2, [r4, #0]
 8001c08:	6993      	ldr	r3, [r2, #24]
 8001c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c0e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c10:	6822      	ldr	r2, [r4, #0]
 8001c12:	6993      	ldr	r3, [r2, #24]
 8001c14:	6929      	ldr	r1, [r5, #16]
 8001c16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c1a:	6193      	str	r3, [r2, #24]
      break;
 8001c1c:	e7e7      	b.n	8001bee <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c1e:	6800      	ldr	r0, [r0, #0]
 8001c20:	f7ff fd94 	bl	800174c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c24:	6822      	ldr	r2, [r4, #0]
 8001c26:	69d3      	ldr	r3, [r2, #28]
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c2e:	6822      	ldr	r2, [r4, #0]
 8001c30:	69d3      	ldr	r3, [r2, #28]
 8001c32:	f023 0304 	bic.w	r3, r3, #4
 8001c36:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c38:	6822      	ldr	r2, [r4, #0]
 8001c3a:	69d3      	ldr	r3, [r2, #28]
 8001c3c:	6929      	ldr	r1, [r5, #16]
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	61d3      	str	r3, [r2, #28]
      break;
 8001c42:	e7d4      	b.n	8001bee <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c44:	6800      	ldr	r0, [r0, #0]
 8001c46:	f7ff fdb9 	bl	80017bc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c4a:	6822      	ldr	r2, [r4, #0]
 8001c4c:	69d3      	ldr	r3, [r2, #28]
 8001c4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c52:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c54:	6822      	ldr	r2, [r4, #0]
 8001c56:	69d3      	ldr	r3, [r2, #28]
 8001c58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c5c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	69d3      	ldr	r3, [r2, #28]
 8001c62:	6929      	ldr	r1, [r5, #16]
 8001c64:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c68:	61d3      	str	r3, [r2, #28]
      break;
 8001c6a:	e7c0      	b.n	8001bee <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	e7c1      	b.n	8001bf4 <HAL_TIM_PWM_ConfigChannel+0x54>

08001c70 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c70:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d033      	beq.n	8001ce0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8001c78:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c80:	2302      	movs	r3, #2
 8001c82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c86:	6803      	ldr	r3, [r0, #0]
 8001c88:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c8a:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c8c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c90:	680a      	ldr	r2, [r1, #0]
 8001c92:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c96:	6803      	ldr	r3, [r0, #0]
 8001c98:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d012      	beq.n	8001cc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00e      	beq.n	8001cc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001caa:	d00b      	beq.n	8001cc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001cac:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d007      	beq.n	8001cc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001cb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d003      	beq.n	8001cc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8001cbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d104      	bne.n	8001cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001cc4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001cc8:	684a      	ldr	r2, [r1, #4]
 8001cca:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ccc:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001cda:	4618      	mov	r0, r3
}
 8001cdc:	bc30      	pop	{r4, r5}
 8001cde:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001ce0:	2002      	movs	r0, #2
}
 8001ce2:	4770      	bx	lr
 8001ce4:	40012c00 	.word	0x40012c00

08001ce8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ce8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d022      	beq.n	8001d36 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001cf6:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cfc:	688a      	ldr	r2, [r1, #8]
 8001cfe:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d04:	684a      	ldr	r2, [r1, #4]
 8001d06:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001d08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d0c:	680a      	ldr	r2, [r1, #0]
 8001d0e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d14:	690a      	ldr	r2, [r1, #16]
 8001d16:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d1c:	694a      	ldr	r2, [r1, #20]
 8001d1e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001d20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d24:	69ca      	ldr	r2, [r1, #28]
 8001d26:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001d28:	6802      	ldr	r2, [r0, #0]
 8001d2a:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001d32:	4618      	mov	r0, r3
 8001d34:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001d36:	2002      	movs	r0, #2
}
 8001d38:	4770      	bx	lr

08001d3a <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d3a:	4770      	bx	lr

08001d3c <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d3c:	4770      	bx	lr
	...

08001d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d40:	b510      	push	{r4, lr}
 8001d42:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d44:	6802      	ldr	r2, [r0, #0]
 8001d46:	6913      	ldr	r3, [r2, #16]
 8001d48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d4c:	68c1      	ldr	r1, [r0, #12]
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d52:	6883      	ldr	r3, [r0, #8]
 8001d54:	6902      	ldr	r2, [r0, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	6942      	ldr	r2, [r0, #20]
 8001d5a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001d5c:	6801      	ldr	r1, [r0, #0]
 8001d5e:	68cb      	ldr	r3, [r1, #12]
 8001d60:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d64:	f023 030c 	bic.w	r3, r3, #12
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d6c:	6802      	ldr	r2, [r0, #0]
 8001d6e:	6953      	ldr	r3, [r2, #20]
 8001d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d74:	6981      	ldr	r1, [r0, #24]
 8001d76:	430b      	orrs	r3, r1
 8001d78:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8001d7a:	6802      	ldr	r2, [r0, #0]
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <UART_SetConfig+0x88>)
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d01f      	beq.n	8001dc2 <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d82:	f7ff fc8f 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d86:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001d8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d8e:	6862      	ldr	r2, [r4, #4]
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d96:	480d      	ldr	r0, [pc, #52]	; (8001dcc <UART_SetConfig+0x8c>)
 8001d98:	fba0 3102 	umull	r3, r1, r0, r2
 8001d9c:	0949      	lsrs	r1, r1, #5
 8001d9e:	2364      	movs	r3, #100	; 0x64
 8001da0:	fb03 2311 	mls	r3, r3, r1, r2
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	3332      	adds	r3, #50	; 0x32
 8001da8:	fba0 2303 	umull	r2, r3, r0, r3
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001db2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	6821      	ldr	r1, [r4, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8001dc0:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8001dc2:	f7ff fc7f 	bl	80016c4 <HAL_RCC_GetPCLK2Freq>
 8001dc6:	e7de      	b.n	8001d86 <UART_SetConfig+0x46>
 8001dc8:	40013800 	.word	0x40013800
 8001dcc:	51eb851f 	.word	0x51eb851f

08001dd0 <HAL_UART_Init>:
  if (huart == NULL)
 8001dd0:	b358      	cbz	r0, 8001e2a <HAL_UART_Init+0x5a>
{
 8001dd2:	b510      	push	{r4, lr}
 8001dd4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001dd6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dda:	b30b      	cbz	r3, 8001e20 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001ddc:	2324      	movs	r3, #36	; 0x24
 8001dde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001de2:	6822      	ldr	r2, [r4, #0]
 8001de4:	68d3      	ldr	r3, [r2, #12]
 8001de6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001dea:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7ff ffa7 	bl	8001d40 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001df2:	6822      	ldr	r2, [r4, #0]
 8001df4:	6913      	ldr	r3, [r2, #16]
 8001df6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001dfa:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dfc:	6822      	ldr	r2, [r4, #0]
 8001dfe:	6953      	ldr	r3, [r2, #20]
 8001e00:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001e04:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001e06:	6822      	ldr	r2, [r4, #0]
 8001e08:	68d3      	ldr	r3, [r2, #12]
 8001e0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e0e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e10:	2000      	movs	r0, #0
 8001e12:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e14:	2320      	movs	r3, #32
 8001e16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001e1e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001e20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001e24:	f7fe fdd6 	bl	80009d4 <HAL_UART_MspInit>
 8001e28:	e7d8      	b.n	8001ddc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001e2a:	2001      	movs	r0, #1
}
 8001e2c:	4770      	bx	lr
	...

08001e30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e30:	480c      	ldr	r0, [pc, #48]	; (8001e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e32:	490d      	ldr	r1, [pc, #52]	; (8001e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e48:	4c0a      	ldr	r4, [pc, #40]	; (8001e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e56:	f7fe fb6f 	bl	8000538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f000 f80f 	bl	8001e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e5e:	f7fe fb12 	bl	8000486 <main>
  bx lr
 8001e62:	4770      	bx	lr
  ldr r0, =_sdata
 8001e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e6c:	08001f20 	.word	0x08001f20
  ldr r2, =_sbss
 8001e70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e74:	200002c0 	.word	0x200002c0

08001e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e78:	e7fe      	b.n	8001e78 <ADC1_2_IRQHandler>
	...

08001e7c <__libc_init_array>:
 8001e7c:	b570      	push	{r4, r5, r6, lr}
 8001e7e:	2600      	movs	r6, #0
 8001e80:	4d0c      	ldr	r5, [pc, #48]	; (8001eb4 <__libc_init_array+0x38>)
 8001e82:	4c0d      	ldr	r4, [pc, #52]	; (8001eb8 <__libc_init_array+0x3c>)
 8001e84:	1b64      	subs	r4, r4, r5
 8001e86:	10a4      	asrs	r4, r4, #2
 8001e88:	42a6      	cmp	r6, r4
 8001e8a:	d109      	bne.n	8001ea0 <__libc_init_array+0x24>
 8001e8c:	f000 f822 	bl	8001ed4 <_init>
 8001e90:	2600      	movs	r6, #0
 8001e92:	4d0a      	ldr	r5, [pc, #40]	; (8001ebc <__libc_init_array+0x40>)
 8001e94:	4c0a      	ldr	r4, [pc, #40]	; (8001ec0 <__libc_init_array+0x44>)
 8001e96:	1b64      	subs	r4, r4, r5
 8001e98:	10a4      	asrs	r4, r4, #2
 8001e9a:	42a6      	cmp	r6, r4
 8001e9c:	d105      	bne.n	8001eaa <__libc_init_array+0x2e>
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ea4:	4798      	blx	r3
 8001ea6:	3601      	adds	r6, #1
 8001ea8:	e7ee      	b.n	8001e88 <__libc_init_array+0xc>
 8001eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eae:	4798      	blx	r3
 8001eb0:	3601      	adds	r6, #1
 8001eb2:	e7f2      	b.n	8001e9a <__libc_init_array+0x1e>
 8001eb4:	08001f18 	.word	0x08001f18
 8001eb8:	08001f18 	.word	0x08001f18
 8001ebc:	08001f18 	.word	0x08001f18
 8001ec0:	08001f1c 	.word	0x08001f1c

08001ec4 <memset>:
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4402      	add	r2, r0
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d100      	bne.n	8001ece <memset+0xa>
 8001ecc:	4770      	bx	lr
 8001ece:	f803 1b01 	strb.w	r1, [r3], #1
 8001ed2:	e7f9      	b.n	8001ec8 <memset+0x4>

08001ed4 <_init>:
 8001ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed6:	bf00      	nop
 8001ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eda:	bc08      	pop	{r3}
 8001edc:	469e      	mov	lr, r3
 8001ede:	4770      	bx	lr

08001ee0 <_fini>:
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	bf00      	nop
 8001ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ee6:	bc08      	pop	{r3}
 8001ee8:	469e      	mov	lr, r3
 8001eea:	4770      	bx	lr
